import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.feature_selection import RFE
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
import warnings
from imblearn.over_sampling import SMOTE

# ==============================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ==============================================================================
st.set_page_config(
    page_title="Preven√ß√£o de Cancelamentos",
    page_icon="üè®",
    layout="wide"
)
sns.set_style("whitegrid")

# ==============================================================================
# DICION√ÅRIOS DE TRADU√á√ÉO E MAPEAMENTO (DEFINIDOS NO IN√çCIO)
# ==============================================================================
VAR_TRANSLATIONS = {
    'lead_time': 'Anteced√™ncia da Reserva (dias)',
    'total_of_special_requests': 'N¬∫ de Pedidos Especiais',
    'required_car_parking_spaces': 'Vaga de Garagem Solicitada',
    'booking_changes': 'N¬∫ de Altera√ß√µes na Reserva',
    'previous_cancellations': 'N¬∫ de Cancelamentos Anteriores',
    'is_repeated_guest': 'Cliente √© Recorrente',
    'adr': 'Pre√ßo M√©dio por Noite (‚Ç¨)',
    'total_nights': 'Total de Noites da Estadia',
    'previous_bookings_not_canceled': 'Reservas Anteriores V√°lidas',
    'adults': 'N¬∫ de Adultos',
    'children': 'N¬∫ de Crian√ßas',
    'babies': 'N¬∫ de Beb√™s',
    'is_canceled': '√â Cancelado',
    'total_guests': 'Total de H√≥spedes (Adultos + Crian√ßas + Beb√™s)',
    'is_agent_booking': 'Reserva Feita por Agente',
    'is_company_booking': 'Reserva de Empresa',
    'is_weekend_stay': 'Estadia Inclui Fim de Semana',
    'children_present': 'Presen√ßa de Crian√ßas/Beb√™s',
    'assigned_room_type_Changed': 'Tipo de Quarto Atribu√≠do Diferente do Reservado',

    # Tradu√ß√£o para categorias ORIGINAIS (para os selectbox do simulador e para display da an√°lise)
    'hotel': 'Tipo de Hotel',
    'meal': 'Regime de Refei√ß√£o',
    'market_segment': 'Segmento de Mercado',
    'distribution_channel': 'Canal de Distribui√ß√£o',
    'customer_type': 'Tipo de Cliente',
    'deposit_type': 'Tipo de Dep√≥sito',
    'assigned_room_type': 'Tipo de Quarto Atribu√≠do',
    'reserved_room_type': 'Tipo de Quarto Reservado',
    'country_grouped': 'Pa√≠s de Origem',

    # Tradu√ß√£o para as Dummies (nomes exatos gerados por pd.get_dummies, que s√£o usados no modelo e VAR_TRANSLATIONS)
    'hotel_City Hotel': 'Hotel: Cidade',
    'hotel_Resort Hotel': 'Hotel: Resort',

    'meal_BB': 'Regime de Refei√ß√£o: Caf√© da Manh√£',
    'meal_FB': 'Regime de Refei√ß√£o: Pens√£o Completa',
    'meal_HB': 'Regime de Refei√ß√£o: Meia Pens√£o',
    'meal_SC': 'Regime de Refei√ß√£o: Sem Refei√ß√£o',
    'meal_Undefined': 'Regime de Refei√ß√£o: Indefinido',

    'market_segment_Aviation': 'Segmento: Avia√ß√£o',
    'market_segment_Complementary': 'Segmento: Cortesia',
    'market_segment_Corporate': 'Segmento: Corporativo',
    'market_segment_Direct': 'Segmento: Direto',
    'market_segment_Groups': 'Segmento: Grupos',
    'market_segment_Online TA': 'Segmento: Ag√™ncia Online (OTA)',
    'market_segment_Offline TA/TO': 'Segmento: Ag√™ncia Offline/Operadora',
    'market_segment_Undefined': 'Segmento: Indefinido',

    'distribution_channel_Corporate': 'Distribui√ß√£o: Corporativa',
    'distribution_channel_Direct': 'Distribui√ß√£o: Direto',
    'distribution_channel_GDS': 'Distribui√ß√£o: GDS',
    'distribution_channel_TA/TO': 'Distribui√ß√£o: Ag√™ncia/Operadora',
    'distribution_channel_Undefined': 'Distribui√ß√£o: Indefinida',

    'customer_type_Contract': 'Tipo de Cliente: Contrato',
    'customer_type_Group': 'Tipo de Cliente: Grupo Fechado',
    'customer_type_Transient': 'Tipo de Cliente: Avulso',
    'customer_type_Transient-Party': 'Tipo de Cliente: Grupo Avulso',

    'deposit_type_Non Refund': 'Dep√≥sito: N√£o Reembols√°vel',
    'deposit_type_No Deposit': 'Dep√≥sito: Sem Dep√≥sito',
    'deposit_type_Refundable': 'Dep√≥sito: Reembols√°vel',

    # Tipos de quarto designados
    'assigned_room_type_A': 'Quarto Designado: A',
    'assigned_room_type_B': 'Quarto Designado: B',
    'assigned_room_type_C': 'Quarto Designado: C',
    'assigned_room_type_D': 'Quarto Designado: D',
    'assigned_room_type_E': 'Quarto Designado: E',
    'assigned_room_type_F': 'Quarto Designado: F',
    'assigned_room_type_G': 'Quarto Designado: G',
    'assigned_room_type_H': 'Quarto Designado: H',
    'assigned_room_type_I': 'Quarto Designado: I',
    'assigned_room_type_K': 'Quarto Designado: K',
    'assigned_room_type_L': 'Quarto Designado: L',
    'assigned_room_type_P': 'Quarto Designado: P',

    # Tipos de quarto reservado
    'reserved_room_type_A': 'Quarto Reservado: A',
    'reserved_room_type_B': 'Quarto Reservado: B',
    'reserved_room_type_C': 'Quarto Reservado: C',
    'reserved_room_type_D': 'Quarto Reservado: D',
    'reserved_room_type_E': 'Quarto Reservado: E',
    'reserved_room_type_F': 'Quarto Reservado: F',
    'reserved_room_type_G': 'Quarto Reservado: G',
    'reserved_room_type_H': 'Quarto Reservado: H',
    'reserved_room_type_L': 'Quarto Reservado: L',
    'reserved_room_type_P': 'Quarto Reservado: P',

    # Pa√≠ses agrupados - Chaves aqui DEVEM ser country_grouped_CODIGO_PAIS
    'country_grouped_PRT': 'Pa√≠s: Portugal',
    'country_grouped_GBR': 'Pa√≠s: Reino Unido',
    'country_grouped_FRA': 'Pa√≠s: Fran√ßa',
    'country_grouped_ESP': 'Pa√≠s: Espanha',
    'country_grouped_DEU': 'Pa√≠s: Alemanha',
    'country_grouped_IRL': 'Pa√≠s: Irlanda',
    'country_grouped_USA': 'Pa√≠s: EUA',
    'country_grouped_BRA': 'Pa√≠s: Brasil',
    'country_grouped_CAN': 'Pa√≠s: Canad√°',
    'country_grouped_NLD': 'Pa√≠s: Holanda',
    'country_grouped_ITA': 'Pa√≠s: It√°lia',
    'country_grouped_BEL': 'Pa√≠s: B√©lgica',
    'country_grouped_CHE': 'Pa√≠s: Su√≠√ßa',
    'country_grouped_AUT': 'Pa√≠s: √Åustria',
    'country_grouped_SWE': 'Pa√≠s: Su√©cia',
    'country_grouped_CHN': 'Pa√≠s: China',
    'country_grouped_JPN': 'Pa√≠s: Jap√£o',
    'country_grouped_AUS': 'Pa√≠s: Austr√°lia',
    'country_grouped_MEX': 'Pa√≠s: M√©xico',
    'country_grouped_RUS': 'Pa√≠s: R√∫ssia',
    'country_grouped_OTHER_COUNTRY': 'Pa√≠s: Outros Pa√≠ses',
}

# Mapeamento para facilitar a sele√ß√£o de vari√°veis categ√≥ricas no simulador
# Associa o nome da coluna original a um DICION√ÅRIO de suas categorias (string como no CSV original)
# e as tradu√ß√µes para as op√ß√µes do selectbox.
CATEGORICAL_COLS_MAP = {
    'hotel': {'City Hotel': 'Hotel na Cidade', 'Resort Hotel': 'Hotel Resort'},
    'meal': {
        'BB': 'Caf√© da Manh√£', 'FB': 'Pens√£o Completa', 'HB': 'Meia Pens√£o',
        'SC': 'Sem Refei√ß√£o', 'Undefined': 'Indefinido'
    },
    'market_segment': {
        'Aviation': 'Avia√ß√£o', 'Complementary': 'Cortesia', 'Corporate': 'Corporativo',
        'Direct': 'Direto', 'Groups': 'Grupos', 'Offline TA/TO': 'Ag√™ncia Offline / Operadora',
        'Online TA': 'Ag√™ncia Online (OTA)', 'Undefined': 'Indefinido'
    },
    'distribution_channel': {
        'Corporate': 'Corporativa', 'Direct': 'Direto', 'GDS': 'GDS',
        'TA/TO': 'Ag√™ncia de Viagem / Operadora', 'Undefined': 'Indefinida'
    },
    'customer_type': {
        'Contract': 'Contrato', 'Group': 'Grupo Fechado', 'Transient': 'Avulso',
        'Transient-Party': 'Grupo Avulso'
    },
    'deposit_type': {
        'No Deposit': 'Sem Dep√≥sito', 'Non Refund': 'N√£o Reembols√°vel',
        'Refundable': 'Reembols√°vel'
    },
    'assigned_room_type': { # Descri√ß√µes Sugeridas - Ajuste conforme sua interpreta√ß√£o
        'A': 'Quarto Tipo A (Padr√£o/B√°sico)', 'B': 'Quarto Tipo B (Econ√¥mico/Simples)', 'C': 'Quarto Tipo C (Conforto/M√©dio)',
        'D': 'Quarto Tipo D (Superior/Amplo)', 'E': 'Quarto Tipo E (Luxo/Premium)', 'F': 'Quarto Tipo F (Familiar/Adaptado)',
        'G': 'Quarto Tipo G (Grande/Fam√≠lia Maior)', 'H': 'Quarto Tipo H (Su√≠te/Executiva)', 'I': 'Quarto Tipo I (Acess√≠vel/Especial)',
        'K': 'Quarto Tipo K (Com Cozinha/Kitnet)', 'L': 'Quarto Tipo L (Su√≠te Presidencial/Cobertura)', 'P': 'Quarto Tipo P (Promocional/Tempor√°rio)'
    },
    'reserved_room_type': { # Descri√ß√µes Sugeridas - Ajuste conforme sua interpreta√ß√£o
        'A': 'Quarto Tipo A (Padr√£o/B√°sico)', 'B': 'Quarto Tipo B (Econ√¥mico/Simples)', 'C': 'Quarto Tipo C (Conforto/M√©dio)',
        'D': 'Quarto Tipo D (Superior/Amplo)', 'E': 'Quarto Tipo E (Luxo/Premium)', 'F': 'Quarto Tipo F (Familiar/Adaptado)',
        'G': 'Quarto Tipo G (Grande/Fam√≠lia Maior)', 'H': 'Quarto Tipo H (Su√≠te/Executiva)', 'L': 'Quarto Tipo L (Su√≠te Presidencial/Cobertura)',
        'P': 'Quarto Tipo P (Promocional/Tempor√°rio)'
    },
    'country_grouped': { # Mapeamento para as categorias agrupadas
        'PRT': 'Portugal', 'GBR': 'Reino Unido', 'FRA': 'Fran√ßa', 'ESP': 'Espanha',
        'DEU': 'Alemanha', 'IRL': 'Irlanda', 'USA': 'EUA', 'BRA': 'Brasil', 'CAN': 'Canad√°',
        'NLD': 'Holanda', 'ITA': 'It√°lia', 'BEL': 'B√©lgica', 'CHE': 'Su√≠√ßa', 'AUT': '√Åustria',
        'SWE': 'Su√©cia', 'CHN': 'China', 'JPN': 'Jap√£o', 'AUS': 'Austr√°lia', 'MEX': 'M√©xico',
        'RUS': 'R√∫ssia', 'OTHER_COUNTRY': 'Outros Pa√≠ses'
    },
}
# ==============================================================================
# FUN√á√ïES EM CACHE
# ==============================================================================
@st.cache_data
def load_and_preprocess_data():
    df = pd.read_csv('hotel_bookings.csv')

    df['children'] = df['children'].fillna(0)
    df['country'] = df['country'].fillna(df['country'].mode()[0])
    df['agent'] = df['agent'].fillna(0)

    if 'company' in df.columns:
        df['is_company_booking'] = (df['company'].notna()).astype(int)
    else:
        df['is_company_booking'] = 0

    df = df.drop(columns=['company'], errors='ignore')

    df['is_agent_booking'] = (df['agent'] != 0).astype(int)

    df = df.dropna(subset=['adr'])
    df = df[df['adr'] >= 0]
    df = df[~((df['adults']==0) & (df['children']==0) & (df['babies']==0))]
    df = df[~((df['stays_in_weekend_nights']==0) & (df['stays_in_week_nights']==0))]
    df['total_nights'] = df['stays_in_weekend_nights'] + df['stays_in_week_nights']

    df['is_weekend_stay'] = (df['stays_in_weekend_nights'] > 0).astype(int)
    df['children_present'] = ((df['children'] > 0) | (df['babies'] > 0)).astype(int)
    df['total_guests'] = df['adults'] + df['children'] + df['babies']
    df['assigned_room_type_Changed'] = (df['assigned_room_type'] != df['reserved_room_type']).astype(int)

    df_model = df[['is_canceled']].copy()

    numerical_cols = ['lead_time', 'total_of_special_requests', 'required_car_parking_spaces',
                      'booking_changes', 'previous_cancellations', 'is_repeated_guest',
                      'adr', 'total_nights', 'previous_bookings_not_canceled',
                      'adults', 'children', 'babies', 'is_agent_booking',
                      'is_company_booking', 'is_weekend_stay', 'children_present', 'total_guests']

    for col in numerical_cols:
        if col in df.columns:
            df_model[col] = df[col]

    top_countries = df['country'].value_counts().nlargest(15).index.tolist()
    df['country_grouped'] = df['country'].apply(lambda x: x if x in top_countries else 'OTHER_COUNTRY')

    categorical_cols_for_dummies = [
        'market_segment', 'deposit_type', 'customer_type', 'distribution_channel',
        'hotel', 'meal', 'assigned_room_type', 'reserved_room_type', 'country_grouped'
    ]
    df_dummies = pd.get_dummies(df[categorical_cols_for_dummies], drop_first=False, dtype=int)

    df_dummies.columns = [col.replace(' ', '_').replace('/', '_').replace('-', '_') for col in df_dummies.columns]

    df_model = pd.concat([df_model, df_dummies], axis=1)
    df_model.columns = ["".join(c if c.isalnum() else "_" for c in str(x)) for x in df_model.columns]

    for col in df_model.columns:
        if df_model[col].nunique() == 1 and col != 'is_canceled':
            df_model = df_model.drop(columns=[col])

    return df_model

@st.cache_resource
def train_model(data, selected_features_list):
    y = data['is_canceled']

    # L√≥gica de remo√ß√£o de features para evitar multicolinearidade perfeita com total_guests
    final_features_for_model = []

    if 'total_guests' in selected_features_list:
        # Se 'total_guests' est√° selecionado, garantir que ele seja o √∫nico representante do n√∫mero de pessoas.
        if 'total_guests' in data.columns and data['total_guests'].nunique() > 1:
            final_features_for_model.append('total_guests')

        # Adicionar outras features selecionadas, exceto os componentes de total_guests
        for feature in selected_features_list:
            if feature not in ['adults', 'children', 'babies', 'total_guests']:
                final_features_for_model.append(feature)

    else: # Se 'total_guests' N√ÉO est√° selecionado, ent√£o incluir 'adults', 'children', 'babies' se foram selecionados.
        final_features_for_model = list(selected_features_list) # Come√ßa com tudo que o usu√°rio selecionou

    # Garantir que todas as features no final_features_for_model realmente existam no 'data' e n√£o sejam constantes.
    final_selected_features = [f for f in final_features_for_model if f in data.columns and data[f].nunique() > 1]

    if not final_selected_features:
        st.error("Nenhuma vari√°vel v√°lida selecionada para o treinamento do modelo ap√≥s a filtragem de colunas constantes. Isso pode acontecer se voc√™ selecionou apenas 'N¬∫ de Adultos', 'N¬∫ de Crian√ßas' ou 'N¬∫ de Beb√™s' sem 'Total de H√≥spedes' e estas colunas individuais n√£o possuem vari√¢ncia nos dados, ou se a combina√ß√£o delas causa problemas. Por favor, ajuste sua sele√ß√£o.")
        return None

    X = data[final_selected_features]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

    if X_train.empty:
        st.error("X_train est√° vazio. Isso pode ocorrer se as vari√°veis selecionadas n√£o possuem vari√¢ncia nos dados de treino. Por favor, selecione outras vari√°veis.")
        return None

    smote = SMOTE(random_state=42)
    X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

    constant_cols_smote = [col for col in X_train_smote.columns if X_train_smote[col].nunique() == 1]
    if constant_cols_smote:
        st.warning(f"As seguintes colunas foram removidas do treino do modelo porque se tornaram constantes ap√≥s SMOTE/rebalanceamento: {', '.join(constant_cols_smote)}. Isso pode afetar os resultados do VIF e do modelo.")
        X_train_smote = X_train_smote.drop(columns=constant_cols_smote)
        X_test = X_test.drop(columns=constant_cols_smote, errors='ignore')

    if X_train_smote.empty:
        st.error("X_train_smote est√° vazio ap√≥s a remo√ß√£o de colunas constantes. N√£o √© poss√≠vel treinar o modelo com as vari√°veis selecionadas.")
        return None

    X_train_smote_const = sm.add_constant(X_train_smote, has_constant='add')

    with np.errstate(over='ignore', divide='ignore', invalid='ignore'):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", sm.tools.sm_exceptions.ConvergenceWarning)
            try:
                logit_model = sm.Logit(y_train_smote.astype(float), X_train_smote_const.astype(float)).fit(method='bfgs', maxiter=5000, disp=0)
            except Exception as e:
                st.error(f"Erro ao treinar o modelo: {e}. Isso pode ser causado por multicolinearidade perfeita, separa√ß√£o completa dos dados, ou um problema de otimiza√ß√£o. Tente selecionar um conjunto diferente de vari√°veis.")
                st.warning(f"Detalhes t√©cnicos do erro: {e}")
                return None

    return {
        "model": logit_model,
        "selected_features": final_selected_features,
        "X_train": X_train,
        "X_test": X_test,
        "y_test": y_test,
        "X_train_smote_mean": X_train_smote.mean(),
        "X_train_smote_max": X_train_smote.max(),
        "X_train_smote_min": X_train_smote.min()
    }
# ==============================================================================
# CABE√áALHO DA APLICA√á√ÉO
# ==============================================================================
col1, col2 = st.columns([1, 4])
with col1:
    st.image("https://em-content.zobj.net/source/microsoft/379/hotel_1f3e8.png", width=120)
with col2:
    st.title("Painel Estrat√©gico de Preven√ß√£o de Cancelamentos")
    st.markdown("Uma ferramenta de Business Intelligence para entender *por que* reservas s√£o canceladas e *como* agir para reduzir perdas.")
    st.markdown("Desenvolvido por: **Pedro Russo e Daniel Vianna**")

# --- CARREGAMENTO E TREINAMENTO ---
data = load_and_preprocess_data()

# Preparar a lista de todas as features dispon√≠veis para sele√ß√£o na sidebar
all_available_features_in_data = [col for col in data.columns if col != 'is_canceled']

all_features_translated_dict = {}
for col in all_available_features_in_data:
    if col in VAR_TRANSLATIONS: # Se a coluna tem uma tradu√ß√£o direta no VAR_TRANSLATIONS
        all_features_translated_dict[VAR_TRANSLATIONS[col]] = col
    else:
        found_translation = False
        for original_col, categories_map in CATEGORICAL_COLS_MAP.items(): # Iterar sobre CATEGORICAL_COLS_MAP para dummies
            for cat_original, cat_translated_display in categories_map.items():
                # Constr√≥i o nome da dummy como aparece no DataFrame `data`
                dummy_name_in_data = f"{original_col}_{cat_original.replace(' ', '_').replace('/', '_').replace('-', '_')}"

                if col == dummy_name_in_data: # Se o nome da coluna corresponde a uma dummy gerada
                    # A chave para o all_features_translated_dict ser√° o nome da FEATURE ORIGINAL + a tradu√ß√£o da CATEGORIA
                    # Ex: 'Hotel: Hotel na Cidade'
                    all_features_translated_dict[f"{VAR_TRANSLATIONS.get(original_col, original_col.replace('_', ' ').title())}: {cat_translated_display}"] = col
                    found_translation = True
                    break
            if found_translation:
                break
        if not found_translation: # √öltimo fallback para qualquer coluna n√£o traduzida
             all_features_translated_dict[col.replace('_', ' ').title()] = col

st.sidebar.header("üîß Constru√ß√£o do Modelo Preditivo")

# Para que o app n√£o quebre na primeira execu√ß√£o (antes de clicar no bot√£o)
model_artifacts = None 

# --- In√≠cio do Formul√°rio ---
with st.sidebar.form(key='form_parametros'):
    st.markdown("**Configure os par√¢metros e clique em 'Analisar' para rodar o modelo.**")
    
    # Lista de vari√°veis padr√£o (mesma l√≥gica de antes, mas dentro do contexto)
    default_selected_features_translated_keys = [
        'Anteced√™ncia da Reserva (dias)', 'N¬∫ de Pedidos Especiais', 'Vaga de Garagem Solicitada',
        'N¬∫ de Altera√ß√µes na Reserva', 'N¬∫ de Cancelamentos Anteriores', 'Cliente √© Recorrente',
        'Pre√ßo M√©dio por Noite (‚Ç¨)', 'Total de Noites da Estadia', 'Reservas Anteriores V√°lidas',
        'N¬∫ de Adultos', 'N¬∫ de Crian√ßas', 'N¬∫ de Beb√™s', 'Reserva Feita por Agente',
        'Reserva de Empresa', 'Estadia Inclui Fim de Semana', 'Presen√ßa de Crian√ßas/Beb√™s', 'Total de H√≥spedes (Adultos + Crian√ßas + Beb√™s)',
        'Dep√≥sito: N√£o Reembols√°vel', 'Dep√≥sito: Sem Dep√≥sito', 'Dep√≥sito: Reembols√°vel',
        'Segmento: Ag√™ncia Online (OTA)', 'Segmento: Grupos', 'Segmento: Direto',
        'Tipo de Cliente: Avulso', 'Tipo de Cliente: Grupo Fechado', 'Tipo de Cliente: Contrato',
        'Distribui√ß√£o: Ag√™ncia/Operadora', 'Distribui√ß√£o: Direto', 'Distribui√ß√£o: Corporativa',
        'Hotel: Cidade', 'Hotel: Resort',
        'Regime de Refei√ß√£o: Caf√© da Manh√£', 'Regime de Refei√ß√£o: Sem Refei√ß√£o', 'Regime de Refei√ß√£o: Pens√£o Completa', 'Regime de Refei√ß√£o: Meia Pens√£o',
        'Quarto Designado: A', 'Tipo de Quarto Atribu√≠do Diferente do Reservado',
        'Quarto Reservado: A', 'Quarto Reservado: B',
        'Pa√≠s: Portugal', 'Pa√≠s: Reino Unido', 'Pa√≠s: EUA', 'Pa√≠s: Brasil', 'Pa√≠s: Outros Pa√≠ses'
    ]
    default_selected_translated = [
        t for t in default_selected_features_translated_keys if t in all_features_translated_dict
    ]

    # Widget de sele√ß√£o de vari√°veis
    selected_features_translated = st.multiselect(
        "1. Fatores para An√°lise:",
        options=sorted(all_features_translated_dict.keys()),
        default=default_selected_translated
    )

    st.markdown("---")

    # Widgets do RFE
    st.markdown("**2. Refinamento com RFE (Opcional)**")
    use_rfe = st.checkbox("Usar RFE para refinar a sele√ß√£o de vari√°veis?", value=False)
    num_features_rfe = 1
    if use_rfe:
        num_features_rfe = st.slider(
            "Quantas vari√°veis o RFE deve selecionar?",
            min_value=1,
            max_value=len(selected_features_translated) if selected_features_translated else 1,
            value=min(8, len(selected_features_translated)) if selected_features_translated else 1,
            step=1,
            help="O RFE avaliar√° todas as vari√°veis que voc√™ selecionou e manter√° apenas o n√∫mero de fatores mais impactantes que voc√™ definir aqui."
        )

    # Bot√£o de submiss√£o do formul√°rio
    st.markdown("---")
    submitted = st.form_submit_button("‚úÖ Analisar com Fatores Selecionados")

# --- Fim do Formul√°rio ---

# A l√≥gica principal do app S√ì RODA DEPOIS que o bot√£o do formul√°rio √© clicado
if submitted:
    if not selected_features_translated:
        st.error("Por favor, selecione ao menos uma vari√°vel para a an√°lise na barra lateral.")
        st.stop()

    selected_features = [all_features_translated_dict[t] for t in selected_features_translated]
    final_features_for_model_training = selected_features

    if use_rfe:
        if len(selected_features) >= 2:
            with st.spinner("Executando RFE para encontrar os melhores fatores..."):
                X_rfe = data[selected_features]
                y_rfe = data['is_canceled']
                rfe_model = LogisticRegression(max_iter=1000, solver='liblinear')
                rfe_selector = RFE(estimator=rfe_model, n_features_to_select=num_features_rfe)
                rfe_selector.fit(X_rfe, y_rfe)
                rfe_selected_mask = rfe_selector.get_support()
                final_features_for_model_training = X_rfe.columns[rfe_selected_mask].tolist()

                original_to_translated_map = {v: k for k, v in all_features_translated_dict.items()}
                rfe_features_translated = [original_to_translated_map[f] for f in final_features_for_model_training]
                st.sidebar.success(f"RFE selecionou as seguintes {len(rfe_features_translated)} vari√°veis para o modelo:")
                st.sidebar.dataframe(pd.DataFrame({'Fatores Selecionados pelo RFE': sorted(rfe_features_translated)}), use_container_width=True)

    with st.spinner("Treinando modelo e gerando an√°lises... Por favor, aguarde."):
        model_artifacts = train_model(data, final_features_for_model_training)

# Se o bot√£o ainda n√£o foi apertado, o restante do c√≥digo n√£o deve rodar
if model_artifacts is None:
    st.info("‚¨ÖÔ∏è Configure os par√¢metros na barra lateral e clique em 'Analisar' para gerar os resultados.")
    st.stop()

if model_artifacts is None:
    st.stop()

model = model_artifacts["model"]
X_train = model_artifacts["X_train"]
X_test = model_artifacts["X_test"]
y_test = model_artifacts["y_test"]
X_train_smote_mean = model_artifacts["X_train_smote_mean"]
X_train_smote_max = model_artifacts["X_train_smote_max"]
X_train_smote_min = model_artifacts["X_train_smote_min"]


# ==============================================================================
# ABAS DA APLICA√á√ÉO
# ==============================================================================
tab1, tab2, tab3, tab4 = st.tabs([
    "‚úÖ Confian√ßa no Modelo",
    "üéØ An√°lise de Impacto",
    "‚öôÔ∏è Simulador de Cen√°rios",
    "üí° Plano de A√ß√£o Personalizado"
])

# ==============================================================================
# ABA 1: CONFIAN√áA NO MODELO
# ==============================================================================
with tab1:
    st.header("üîç O Modelo √© Confi√°vel?")
    st.markdown("Antes de confiar nas previs√µes, validamos a sa√∫de do nosso modelo com os testes exigidos pela tarefa.")
    with st.expander("Clique para ver os detalhes dos diagn√≥sticos t√©cnicos"):
        st.markdown(f"- *Sele√ß√£o de Vari√°veis:* O modelo foi constru√≠do com os **{len(model.params) - 1 if 'const' in model.params else len(model.params)} fatores** que voc√™ selecionou (e opcionalmente refinou com RFE).")
        st.markdown("- *Balanceamento:* O desequil√≠brio entre cancelamentos e n√£o-cancelamentos foi corrigido com SMOTE (Synthetic Minority Over-sampling Technique).")

        st.subheader("Teste de Multicolinearidade (VIF)")
        st.markdown("""
        O **Fator de Infla√ß√£o da Vari√¢ncia (VIF)** mede o qu√£o correlacionada uma vari√°vel explicativa √© com as outras vari√°veis explicativas no modelo.
        * **VIFs baixos (pr√≥ximos de 1):** Indicam pouca ou nenhuma multicolinearidade. A vari√°vel n√£o √© bem explicada pelas outras.
        * **VIFs entre 5 e 10:** Sugerem multicolinearidade moderada, que pode ser toler√°vel, mas deve ser observada.
        * **VIFs acima de 10:** Indicam alta multicolinearidade, o que significa que a vari√°vel pode ser quase perfeitamente explicada por uma combina√ß√£o linear de outras vari√°veis. Isso pode tornar os coeficientes do modelo inst√°veis e dif√≠ceis de interpretar. 'Indefinido' significa multicolinearidade perfeita.
        """)

        X_const_for_vif = sm.add_constant(X_train, has_constant='add')

        numeric_cols_for_vif = [col for col in X_const_for_vif.columns if pd.api.types.is_numeric_dtype(X_const_for_vif[col]) and X_const_for_vif[col].nunique() > 1]

        vif_data = pd.DataFrame()
        if 'const' in numeric_cols_for_vif:
            numeric_cols_for_vif.remove('const')

        if len(numeric_cols_for_vif) > 1:
            with np.errstate(divide='ignore', invalid='ignore'):
                vif_data["feature"] = numeric_cols_for_vif
                vif_data["VIF"] = [variance_inflation_factor(X_const_for_vif[numeric_cols_for_vif].values.astype(float), i)
                                   for i in range(len(numeric_cols_for_vif))]

            vif_data['feature'] = vif_data['feature'].map(VAR_TRANSLATIONS)

            vif_data['Sortable_VIF'] = pd.to_numeric(vif_data['VIF'], errors='coerce')

            max_finite_vif = vif_data['Sortable_VIF'].replace([np.inf, -np.inf], np.nan).dropna().max()

            if pd.isna(max_finite_vif):
                vif_data['Sortable_VIF'] = vif_data['Sortable_VIF'].fillna(np.finfo(np.float64).max)
            else:
                vif_data['Sortable_VIF'] = vif_data['Sortable_VIF'].fillna(max_finite_vif + 1e9)

            vif_data['VIF'] = vif_data['VIF'].replace([np.inf, -np.inf], 'Indefinido (Multicolinearidade Perfeita)')

            st.dataframe(vif_data.sort_values(by="Sortable_VIF", ascending=False).drop(columns="Sortable_VIF"))
            st.caption("Valores de VIF acima de 5-10 podem indicar multicolinearidade preocupante, o que pode afetar a estabilidade e a interpreta√ß√£o dos coeficientes do modelo. 'Indefinido' significa multicolinearidade perfeita. Valores mais baixos s√£o prefer√≠veis. O modelo Log√≠stico do Statsmodels, contudo, √© robusto a certo grau de multicolinearidade.")
        else:
            st.info("O c√°lculo do VIF n√£o foi realizado porque ele requer ao menos duas vari√°veis num√©ricas no modelo para comparar a colinearidade entre elas.")


        st.subheader("Gr√°ficos de Curva Log√≠stica para Vari√°veis Chave")

        numeric_selected_features = [f for f in final_features_for_model_training if data[f].nunique() > 2 and f in X_train.columns]

        if len(numeric_selected_features) >= 3:
            plot_features = numeric_selected_features[:3]
        elif len(numeric_selected_features) > 0:
            plot_features = numeric_selected_features
        else:
            plot_features = []
            st.info("N√£o h√° vari√°veis cont√≠nuas suficientes selecionadas para plotar a curva log√≠stica.")

        for feature in plot_features:
            fig, ax = plt.subplots(figsize=(8, 5))

            x_min = X_train[feature].min()
            x_max = X_train[feature].max()
            x_values = np.linspace(x_min, x_max, 100)

            mean_values = X_train_smote_mean.copy()
            mean_values['const'] = 1.0

            temp_df = pd.DataFrame(np.tile(mean_values.values, (len(x_values), 1)), columns=mean_values.index)
            temp_df[feature] = x_values

            cols_to_use = [col for col in model.params.index if col in temp_df.columns]
            temp_df = temp_df[cols_to_use]

            for col in model.params.index:
                if col not in temp_df.columns:
                    temp_df[col] = 0.0

            temp_df = temp_df[model.params.index]

            with np.errstate(over='ignore'):
                y_pred_proba_plot = model.predict(temp_df.astype(float))

            ax.plot(x_values, y_pred_proba_plot, color='blue')
            ax.set_xlabel(VAR_TRANSLATIONS.get(feature, feature))
            ax.set_ylabel("Probabilidade de Cancelamento")
            ax.set_title(f"Curva Log√≠stica para {VAR_TRANSLATIONS.get(feature, feature)}")
            ax.grid(True)
            st.pyplot(fig, use_container_width=True)
            plt.close(fig)

    st.header("üéØ Performance do Modelo em A√ß√£o")
    st.markdown("""
    A performance do modelo √© avaliada por m√©tricas que indicam qu√£o bem ele consegue prever os cancelamentos.
    """)

    X_test_const = sm.add_constant(X_test, has_constant='add')

    missing_cols = set(model.params.index) - set(X_test_const.columns)
    for c in missing_cols:
        X_test_const[c] = 0

    X_test_for_predict = X_test_const[model.params.index]

    with np.errstate(over='ignore'):
        y_pred_proba = model.predict(X_test_for_predict.astype(float))

    threshold = st.slider("Selecione o Limiar de Classifica√ß√£o (Threshold)", 0.0, 1.0, 0.5, 0.05)
    y_pred_class = (y_pred_proba >= threshold).astype(int)

    c1, c2 = st.columns(2)
    with c1:
        st.subheader("Capacidade de Discernimento (AUC)")
        auc_score = roc_auc_score(y_test, y_pred_proba)
        st.metric(label="Nota de Discernimento (de 0 a 1)", value=f"{auc_score:.3f}")
        st.progress(auc_score)
        st.caption("""
        Mede a habilidade do modelo em separar corretamente as classes (reservas que cancelam das que n√£o cancelam).
        * Um AUC de 0.5 significa que o modelo n√£o √© melhor que um chute aleat√≥rio.
        * Um AUC de 1.0 significa que o modelo √© perfeito.
        * **Como √© calculado:** √â a √°rea sob a Curva ROC (Receiver Operating Characteristic), que plota a Taxa de Verdadeiros Positivos (sensibilidade) versus a Taxa de Falsos Positivos (1 - especificidade) em v√°rios limiares.
        """)
    with c2:
        st.subheader("Curva ROC")
        fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
        fig_roc, ax = plt.subplots(figsize=(6, 4))
        ax.plot(fpr, tpr, color='darkorange', lw=2, label=f'AUC = {auc_score:.2f}')
        ax.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
        ax.set_xlabel('Taxa de Falsos Positivos')
        ax.set_ylabel('Taxa de Verdadeiros Positivos')
        ax.set_title('Curva ROC')
        ax.legend(loc="lower right")
        st.pyplot(fig_roc, use_container_width=True)
        plt.close(fig_roc)

    st.subheader("M√©tricas de Classifica√ß√£o (com Threshold selecionado)")
    st.markdown("""
    As m√©tricas abaixo dependem do "limiar de classifica√ß√£o" (Threshold) que voc√™ escolheu.
    Um Threshold de 0.5 (padr√£o) significa que se a probabilidade de cancelamento prevista for >= 0.5, o modelo prev√™ "cancelamento".
    """)
    col_metrics1, col_metrics2, col_metrics3, col_metrics4 = st.columns(4)
    with col_metrics1:
        st.metric("Acur√°cia", f"{accuracy_score(y_test, y_pred_class):.3f}")
        st.caption("""
        Propor√ß√£o de previs√µes corretas (acertos totais) sobre o total de observa√ß√µes.

        **C√°lculo:** (Verdadeiros Positivos + Verdadeiros Negativos) / Total de Observa√ß√µes.

        *Pontos fortes:* Intuitiva, f√°cil de entender.

        *Limita√ß√µes:* Pode ser enganosa em dados desbalanceados (se 95% das reservas n√£o cancelam, um modelo que sempre prev√™ 'n√£o cancela' ter√° 95% de acur√°cia, mas √© in√∫til).
        """)
    with col_metrics2:
        st.metric("Precis√£o", f"{precision_score(y_test, y_pred_class):.3f}")
        st.caption("""
        Das reservas que o modelo previu como **canceladas**, quantas realmente cancelaram.

        **Foco:** Minimizar falsos positivos (alarmes falsos). Alta precis√£o significa que, quando o modelo diz 'vai cancelar', ele geralmente est√° certo. Isso √© importante para evitar gastos desnecess√°rios com a√ß√µes preventivas em reservas que n√£o cancelariam.

        **C√°lculo:** Verdadeiros Positivos / (Verdadeiros Positivos + Falsos Positivos).
        """)
    with col_metrics3:
        st.metric("Recall", f"{recall_score(y_test, y_pred_class):.3f}")
        st.caption("""
        Das reservas que **realmente cancelaram**, quantas foram corretamente previstas pelo modelo.

        **Foco:** Minimizar falsos negativos (cancelamentos perdidos). Alto recall significa que o modelo consegue identificar a maioria dos cancelamentos reais. Isso √© importante para n√£o perder a oportunidade de aplicar uma a√ß√£o preventiva e reter o cliente.

        **C√°lculo:** Verdadeiros Positivos / (Verdadeiros Positivos + Falsos Negativos).
        """)
    with col_metrics4:
        st.metric("F1-Score", f"{f1_score(y_test, y_pred_class):.3f}")
        st.caption("""
        M√©dia harm√¥nica entre Precis√£o e Recall. √â √∫til quando h√° um desequil√≠brio entre as classes e voc√™ busca um equil√≠brio entre minimizar falsos positivos e falsos negativos.

        **C√°lculo:** 2 * (Precis√£o * Recall) / (Precis√£o + Recall).

        *Interpreta√ß√£o:* Um F1-Score alto indica que o modelo tem boa precis√£o e recall, retornando poucas previs√µes incorretas (falsos positivos) e n√£o perdendo muitas das positivas reais (falsos negativos).
        """)

    st.subheader("Matriz de Confus√£o")
    cm = confusion_matrix(y_test, y_pred_class)
    fig_cm, ax = plt.subplots(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax,
                xticklabels=['N√£o Cancelou (Previsto)', 'Cancelou (Previsto)'], yticklabels=['N√£o Cancelou (Real)', 'Cancelou (Real)'])
    ax.set_xlabel('Previs√£o do Modelo')
    ax.set_ylabel('Valor Real')
    ax.set_title('Matriz de Confus√£o')
    st.pyplot(fig_cm, use_container_width=True)
    plt.close(fig_cm)
    st.caption("""
    - **Verdadeiro Negativo (Superior Esquerdo):** Reservas n√£o canceladas, corretamente previstas.
    - **Falso Positivo (Superior Direito):** Reservas n√£o canceladas, *incorretamente* previstas como canceladas (custo de oportunidade, super-alerta).
    - **Falso Negativo (Inferior Esquerdo):** Reservas canceladas, *incorretamente* previstas como n√£o canceladas (custo real de cancelamento, perda de receita).
    - **Verdadeiro Positivo (Inferior Direito):** Reservas canceladas, corretamente previstas (base para a√ß√µes preventivas eficazes).
    """)
# ==============================================================================
# ABA 2: AN√ÅLISE DE IMPACTO
# ==============================================================================
with tab2:
    st.header("üéØ An√°lise de Impacto dos Fatores de Risco")
    st.markdown("Esta se√ß√£o detalha como cada vari√°vel selecionada influencia a probabilidade de uma reserva ser cancelada. Entender esses impactos √© crucial para desenvolver estrat√©gias eficazes de preven√ß√£o.")

    st.subheader("An√°lise dos Coeficientes do Modelo (Log-Odds)")
    with st.expander("Clique para entender e ver os coeficientes em Log-Odds"):
        st.markdown("""
        #### O que s√£o Log-Odds e por que s√£o √∫teis?

        Antes de se tornarem o "Odds Ratio" (que √© mais f√°cil de interpretar), os fatores de impacto s√£o calculados como **Coeficientes de Log-Odds**. Pense neles como o **"motor" do modelo**, mostrando a for√ßa e a dire√ß√£o brutas da influ√™ncia de cada fator.

        * **Como √© calculado?** A regress√£o log√≠stica n√£o prev√™ a probabilidade diretamente. Ela prev√™ a "Log-Odds" (logaritmo da chance) de um evento acontecer.
            * **Chance (Odds):** √â a probabilidade de um evento acontecer dividida pela probabilidade de n√£o acontecer. Por exemplo, se a chance de cancelamento √© de 2 para 1, o Odds √© 2.
            * **Log-Odds:** √â simplesmente o logaritmo dessa chance. O modelo usa essa escala porque ela √© matematicamente conveniente para os c√°lculos.

        * **Como isso me ajuda?** Analisar os Log-Odds permite entender o impacto fundamental de cada vari√°vel no modelo:
            * **Coeficiente Positivo (> 0):** √â um **fator de risco**. Quanto maior o n√∫mero, mais forte √© seu poder de aumentar a chance de um cancelamento.
            * **Coeficiente Negativo (< 0):** √â um **fator de prote√ß√£o**. Quanto mais negativo o n√∫mero, mais forte √© seu poder de *diminuir* a chance de um cancelamento.
            * **Coeficiente Pr√≥ximo de Zero (~ 0):** O fator tem pouco ou nenhum efeito.

        A tabela abaixo mostra esses coeficientes. Embora menos intuitivos que o Odds Ratio, eles s√£o a base matem√°tica de toda a an√°lise de impacto que vem a seguir.
        """)

        log_odds_results = pd.DataFrame({
            "Coeficiente (Log-Odds)": model.params,
            "P-valor": model.pvalues,
        }).drop('const', errors='ignore')

        log_odds_results.index = log_odds_results.index.map(lambda x: VAR_TRANSLATIONS.get(x, x.replace('_', ' ').title()))
        log_odds_results = log_odds_results.sort_values(by="Coeficiente (Log-Odds)", ascending=False)

        st.dataframe(log_odds_results.style.format({'Coeficiente (Log-Odds)': '{:.4f}', 'P-valor': '{:.4f}'}), use_container_width=True)
    st.markdown("---")

    # Explica√ß√£o da tabela e dos valores (Aprimorada com detalhes sobre o c√°lculo do Odds Ratio)
    st.subheader("Como interpretar a tabela de impacto (Odds Ratio)?")
    st.info("""
    Esta tabela exibe a **For√ßa do Impacto** (Odds Ratio) de cada fator (vari√°vel) que voc√™ selecionou sobre a **chance de cancelamento** de uma reserva, mantendo os outros fatores constantes. Al√©m disso, mostra a **Signific√¢ncia Estat√≠stica** do impacto.

    * **O que √© o Odds Ratio e como √© calculado?**
        O Odds Ratio √© derivado dos coeficientes do modelo de Regress√£o Log√≠stica. Em um modelo log√≠stico, os coeficientes $(\\beta)$ representam o impacto de cada vari√°vel na **log-odds** do evento (cancelamento). Para converter a log-odds de volta para uma medida de chance mais intuitiva (as odds), usamos a fun√ß√£o exponencial:
        $$ \\text{Odds Ratio} = e^{\\beta} $$
        Como a fun√ß√£o exponencial ($e^x$) √© sempre positiva para qualquer n√∫mero real $x$, o Odds Ratio ser√° **sempre um n√∫mero positivo ($> 0$)**.

    * **Interpretando o Odds Ratio:**
        * **Odds Ratio > 1 (Vermelho):** O fator **aumenta a chance de cancelamento**. Isso ocorre quando o coeficiente $(\\beta)$ da vari√°vel √© positivo. Quanto maior o Odds Ratio, maior √© o aumento. Por exemplo, um valor de **1.5** significa que a chance de cancelar √© **50% maior** (1.5 - 1 = 0.5, ou 50%) para cada unidade de aumento no fator (para vari√°veis cont√≠nuas) ou quando a categoria do fator est√° presente (para vari√°veis bin√°rias).
        * **Odds Ratio < 1 (Verde):** O fator **diminui a chance de cancelamento** (√© um fator de prote√ß√£o). Isso ocorre quando o coeficiente $(\\beta)$ da vari√°vel √© negativo. Quanto mais pr√≥ximo de 0 o Odds Ratio (ou seja, quanto mais negativo o coeficiente), maior a diminui√ß√£o da chance. Por exemplo, um valor de **0.7** significa que a chance de cancelar √© **30% menor** (1 - 0.7 = 0.3, ou 30%) para cada unidade de aumento no fator (ou quando a categoria est√° ativa).
        * **Odds Ratio = 1 (ou muito pr√≥ximo):** O fator **n√£o tem impacto estatisticamente relevante** na chance de cancelamento. Isso ocorre quando o coeficiente $(\\beta)$ da vari√°vel √© pr√≥ximo de zero. Sua presen√ßa ou varia√ß√£o n√£o altera significativamente a probabilidade de cancelamento.

    * **P-valor:** Indica a probabilidade de que o impacto observado do fator seja apenas por acaso. Um P-valor baixo (tipicamente **< 0.05**) sugere que o impacto √© estatisticamente **real** e n√£o fruto da sorte, sendo confi√°vel para tomada de decis√£o.
    * **Signific√¢ncia:** Baseado no P-valor. 'Significativo' indica que podemos confiar no impacto do fator para a previs√£o de cancelamento. 'N√£o Significativo' significa que o efeito observado pode ser apenas aleat√≥rio e n√£o deve ser usado para basear a√ß√µes.
    """)

    results = pd.DataFrame({
        "For√ßa do Impacto (Odds Ratio)": np.exp(model.params),
        "P-valor": model.pvalues,
    }).drop('const', errors='ignore')

    results['Signific√¢ncia'] = np.where(results['P-valor'] < 0.05, 'Significativo', 'N√£o Significativo')
    results.index = results.index.map(lambda x: VAR_TRANSLATIONS.get(x, x))

    def style_impact_table(df):
        def color_cells(val):
            if isinstance(val, (int, float)):
                if val > 1:
                    intensity = min(1, (val - 1) / 4)
                    g_b_value = int(255 * (1 - intensity))
                    return f'background-color: rgb(255, {g_b_value}, {g_b_value}); color: black'
                elif val < 1:
                    intensity = min(1, (1 - val) / 1)
                    r_b_value = int(255 * (1 - intensity))
                    return f'background-color: rgb({r_b_value}, 255, {r_b_value}); color: black'
            return 'color: black'

        styled_df = df.style.map(color_cells, subset=["For√ßa do Impacto (Odds Ratio)"])
        styled_df = styled_df.format({'For√ßa do Impacto (Odds Ratio)': '{:.4f}', 'P-valor': '{:.4f}'})
        return styled_df

    st.subheader("Tabela de Impacto dos Fatores (Odds Ratio)")
    st.dataframe(style_impact_table(results.sort_values(by="For√ßa do Impacto (Odds Ratio)", ascending=False)), use_container_width=True)

    st.markdown("---")
    st.subheader("An√°lise Detalhada por Fator")
    st.markdown("Clique em cada fator para entender seu impacto espec√≠fico na chance de cancelamento:")

    sorted_results_for_analysis = results.sort_values(by="For√ßa do Impacto (Odds Ratio)", ascending=False)

    with np.errstate(over='ignore'): # Suprimir warnings de overflow ao calcular np.exp em Odds Ratios extremos
        for index, row in sorted_results_for_analysis.iterrows():
            feature_name_translated = index # Este √© o nome j√° traduzido (ex: 'Pa√≠s: Portugal')
            odds_ratio_raw = row["For√ßa do Impacto (Odds Ratio)"]
            p_value = row["P-valor"]
            significance = row["Signific√¢ncia"]

            # Tratar Odds Ratio infinito para exibi√ß√£o e categoriza√ß√£o
            if np.isinf(odds_ratio_raw):
                odds_ratio_display = "Indefinido (muito alto)"
                odds_ratio = 999999999 # Um n√∫mero muito grande para cair na maior categoria de risco
            else:
                odds_ratio_display = f"{odds_ratio_raw:.3f}"
                odds_ratio = odds_ratio_raw

            with st.expander(f"**{feature_name_translated}** (Odds Ratio: {odds_ratio_display}, P-valor: {p_value:.3f})"):
                st.markdown(f"**An√°lise para '{feature_name_translated}':**")

                if significance == 'N√£o Significativo':
                    st.info(f"O impacto de '{feature_name_translated}' (Odds Ratio: {odds_ratio_display}) **n√£o √© estatisticamente significativo** (P-valor: {p_value:.3f} > 0.05). Isso significa que, com base nos dados, n√£o podemos afirmar com confian√ßa que este fator realmente influencia a chance de cancelamento; a varia√ß√£o observada pode ser apenas por acaso. Portanto, **n√£o √© recomendado basear decis√µes estrat√©gicas importantes apenas neste fator.**")
                elif odds_ratio > 1:
                    percentage_increase = (odds_ratio - 1) * 100

                    if odds_ratio >= 100:
                        st.error(f"**RISCO EXTREMAMENTE CR√çTICO!** O Odds Ratio de **{odds_ratio_display}** √© imensamente maior que 1. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **aumenta a chance de cancelamento em mais de {percentage_increase:.0f}%**. Este √© um fator de risco **massivo** e sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma que seu impacto √© real. **Requer aten√ß√£o imediata.**")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem, calculamos $({odds_ratio_display} - 1) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['deposit_type_Non Refund']:
                            st.markdown("Este √© o **maior indicador de risco** na maioria dos modelos. Reservas com este tipo de dep√≥sito t√™m uma chance drasticamente maior de serem canceladas, muitas vezes por falta de pagamento ou comprometimento inicial. √â crucial monitorar pagamentos associados a esta condi√ß√£o e considerar pol√≠ticas de pagamento mais rigorosas ou alternativas para este segmento.")
                    elif odds_ratio >= 10:
                        st.warning(f"**RISCO MUITO ALTO!** O Odds Ratio de **{odds_ratio_display}** √© substancialmente maior que 1. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **aumenta a chance de cancelamento em aproximadamente {percentage_increase:.1f}%**. √â um fator de risco **muito forte**, e sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma que seu impacto √© real. **Recomenda-se vigil√¢ncia.**")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem, calculamos $({odds_ratio_display} - 1) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['previous_cancellations']:
                            st.markdown("Um hist√≥rico de cancelamentos anteriores √© um **fort√≠ssimo preditor** de cancelamento futuro. Indica um padr√£o de comportamento do cliente que exige aten√ß√£o imediata e, possivelmente, uma abordagem personalizada ou pol√≠ticas de pr√©-pagamento mais rigorosas.")
                    elif odds_ratio >= 2:
                        st.warning(f"**RISCO ELEVADO!** O Odds Ratio de **{odds_ratio_display}** √© significativamente maior que 1. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **aumenta a chance de cancelamento em aproximadamente {percentage_increase:.1f}%**. √â um fator de risco importante e sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma que seu impacto √© real. **Monitore de perto.**")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem, calculamos $({odds_ratio_display} - 1) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['market_segment_Online TA']:
                            st.markdown("Canais como OTAs (Online Travel Agencies) frequentemente oferecem maior flexibilidade de cancelamento, o que contribui para o risco. √â importante entender as pol√≠ticas espec√≠ficas de cada OTA, que podem ter prazos de cancelamento mais longos ou menos restritivos, e tentar converter a reserva para um canal direto oferecendo benef√≠cios exclusivos.")
                        elif feature_name_translated == VAR_TRANSLATIONS['customer_type_Transient']:
                            st.markdown("Clientes avulsos (Transient), que n√£o fazem parte de grupos ou contratos, podem ter menos lealdade ou compromisso estabelecido, aumentando ligeiramente a chance de cancelamento. Eles podem estar mais propensos a comparar ofertas e mudar de ideia at√© a data da estadia.")
                        elif feature_name_translated == VAR_TRANSLATIONS['hotel_City Hotel']:
                            st.markdown("Se este fator for significativo, indica que reservas em **Hot√©is de Cidade** podem ter um risco de cancelamento maior em compara√ß√£o com outros tipos de hotel (ex: Resort), devido a caracter√≠sticas de viagem ou p√∫blico-alvo distintos, como viagens a neg√≥cios mais suscet√≠veis a altera√ß√µes de agenda.")
                        elif feature_name_translated == VAR_TRANSLATIONS['distribution_channel_TA/TO']:
                             st.markdown("O canal de distribui√ß√£o 'Ag√™ncia de Viagem/Operadora' pode estar associado a um risco maior de cancelamento, possivelmente devido a pol√≠ticas de cancelamento mais flex√≠veis ou a tipos de reservas espec√≠ficos (ex: pacotes tur√≠sticos) intermediados por esses canais que t√™m maior probabilidade de serem alterados.")
                        elif feature_name_translated == VAR_TRANSLATIONS['meal_SC']:
                             st.markdown("O regime de refei√ß√£o 'Sem Refei√ß√£o' (SC) pode estar associado a um maior risco de cancelamento, talvez indicando um cliente que busca apenas hospedagem b√°sica e tem menos 'la√ßos' com a experi√™ncia completa do hotel ou menos comprometimento com a estadia planejada.")
                        elif feature_name_translated == VAR_TRANSLATIONS['total_guests']:
                             st.markdown(f"Um maior n√∫mero de h√≥spedes ({feature_name_translated}) pode aumentar a complexidade da reserva e a probabilidade de cancelamento em aproximadamente {percentage_increase:.1f}%, talvez devido a altera√ß√µes de planos de um dos membros do grupo.")
                        elif feature_name_translated == VAR_TRANSLATIONS['assigned_room_type_Changed']:
                             st.markdown(f"Se o tipo de quarto foi alterado ap√≥s a reserva original, isso pode indicar um risco de cancelamento de {percentage_increase:.1f}%, talvez por insatisfa√ß√£o com a mudan√ßa ou incerteza no planejamento.")
                        elif feature_name_translated == VAR_TRANSLATIONS['is_agent_booking']:
                             st.markdown(f"Se for uma reserva feita por um agente e este fator for de risco, pode indicar que certos agentes t√™m maior taxa de cancelamento, talvez devido a volume alto ou caracter√≠sticas de suas reservas. Monitore a performance de agentes espec√≠ficos.")
                    else: # Odds Ratio entre 1 e 2 (impacto menor, 0.1% a 99%)
                        st.info(f"**RISCO MODERADO/BAIXO!** O Odds Ratio de **{odds_ratio_display}** √© ligeiramente maior que 1. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **aumenta a chance de cancelamento em aproximadamente {percentage_increase:.1f}%**. √â um fator de risco presente, mas com impacto mais discreto. Sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma que seu impacto √© real.")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem, calculamos $({odds_ratio_display} - 1) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['lead_time']:
                            st.markdown(f"Para cada dia a mais de anteced√™ncia na reserva, a chance de cancelamento aumenta em aproximadamente {percentage_increase:.1f}%. Embora o impacto por dia seja pequeno, para reservas com **muita anteced√™ncia (centenas de dias)**, o efeito cumulativo pode ser substancial, tornando a reserva mais vulner√°vel a mudan√ßas de plano ou a encontrar melhores ofertas. Monitore proativamente reservas com lead time elevado.")
                        elif feature_name_translated == VAR_TRANSLATIONS['adr']:
                            st.markdown(f"Para cada euro a mais no pre√ßo m√©dio por noite, a chance de cancelamento aumenta em aproximadamente {percentage_increase:.1f}%*. Um ADR (Average Daily Rate) mais alto pode levar a uma maior reavalia√ß√£o por parte do cliente, especialmente se o valor percebido n√£o justificar o pre√ßo. O impacto √© marginal por euro, mas pode somar em reservas caras, onde o cliente pode buscar alternativas mais em conta. (*Obs: Este √© um impacto percentual por unidade. Um pequeno percentual pode significar um grande impacto em valores altos de ADR.)")
                        elif feature_name_translated == VAR_TRANSLATIONS['total_nights']:
                             st.markdown(f"Para cada noite adicional de estadia, a chance de cancelamento aumenta em aproximadamente {percentage_increase:.1f}%*. Em estadias muito longas, esse efeito pode ser mais percept√≠vel e indica uma maior flexibilidade nos planos do cliente, que pode estar mais propenso a ajustar ou cancelar partes da estadia. (*Obs: Este √© um impacto percentual por unidade. Um pequeno percentual pode significar um grande impacto em valores altos de Noites.)")
                        elif feature_name_translated == VAR_TRANSLATIONS['adults']:
                             st.markdown(f"Para cada adulto adicional, a chance de cancelamento aumenta em aproximadamente {percentage_increase:.1f}%*. Este fator, se significativo, pode indicar maior complexidade na reserva ou maior chance de altera√ß√µes de planos para grupos maiores de adultos. (*Obs: Este √© um impacto percentual por unidade de adulto, o impacto real aumenta com mais adultos.)")
                        elif feature_name_translated == VAR_TRANSLATIONS['is_weekend_stay']:
                             st.markdown(f"Estadias que incluem noites de fim de semana podem ter uma chance de cancelamento {percentage_increase:.1f}% maior, talvez indicando uma flexibilidade maior em planos de lazer.")
                        elif feature_name_translated == VAR_TRANSLATIONS['customer_type_Group']:
                             st.markdown(f"Reservas do tipo 'Grupo' podem apresentar uma chance de cancelamento {percentage_increase:.1f}% maior, possivelmente devido √† complexidade da coordena√ß√£o de m√∫ltiplos indiv√≠duos.")


                else: # odds_ratio < 1
                    percentage_decrease = (1 - odds_ratio) * 100

                    if odds_ratio <= 0.1:
                        st.success(f"**FORTE FATOR DE PROTE√á√ÉO!** O Odds Ratio de **{odds_ratio_display}** √© extremamente baixo. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **diminui a chance de cancelamento em mais de {percentage_decrease:.0f}%**. Este √© um fator protetor **excepcional**, e sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma seu impacto real. **Invista neste aspecto!**")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem de diminui√ß√£o, calculamos $(1 - {odds_ratio_display}) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['is_repeated_guest']:
                            st.markdown("Clientes recorrentes demonstram **lealdade e confian√ßa** no hotel, resultando em uma chance de cancelamento significativamente menor. Eles j√° conhecem e valorizam a experi√™ncia oferecida, tornando-os um segmento de baixo risco e alto valor. Invista pesado na fideliza√ß√£o desses clientes.")
                        elif feature_name_translated == VAR_TRANSLATIONS['total_of_special_requests']:
                            st.markdown("Clientes que fazem pedidos especiais demonstram um **maior engajamento e compromisso** com a estadia e a experi√™ncia no hotel, tornando-os menos propensos a cancelar. Isso indica um investimento emocional na reserva, pois o cliente j√° est√° personalizando sua experi√™ncia, o que reduz a probabilidade de desist√™ncia.")
                    elif odds_ratio <= 0.5:
                        st.success(f"**FATOR DE PROTE√á√ÉO S√ìLIDO!** O Odds Ratio de **{odds_ratio_display}** √© significativamente menor que 1. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **diminui a chance de cancelamento em aproximadamente {percentage_decrease:.1f}%**. Este √© um fator protetor **muito valioso**, e sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma que seu impacto √© real.")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem de diminui√ß√£o, calculamos $(1 - {odds_ratio_display}) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['booking_changes']:
                            st.markdown("A realiza√ß√£o de altera√ß√µes na reserva sugere que o cliente est√° **ajustando seus planos em vez de cancelar completamente**, indicando maior comprometimento e flexibilidade. Clientes que interagem para modificar a reserva s√£o mais propensos a mant√™-la e menos propensos a desistir totalmente, o que √© um sinal positivo.")
                        elif feature_name_translated == VAR_TRANSLATIONS['previous_bookings_not_canceled']:
                             st.markdown("Um maior n√∫mero de reservas anteriores que *n√£o foram canceladas* demonstra um hist√≥rico de confiabilidade do cliente. Isso indica que ele tende a seguir com suas reservas e √© um bom indicador de menor risco futuro. Clientes com esse hist√≥rico s√£o mais previs√≠veis e menos propensos a cancelar.")
                        elif feature_name_translated == VAR_TRANSLATIONS['children_present']:
                             st.markdown("A presen√ßa de crian√ßas ou beb√™s na reserva, se significativa, pode indicar um planejamento familiar mais robusto e menos propenso a cancelamentos de √∫ltima hora, pois viagens em fam√≠lia geralmente envolvem mais coordena√ß√£o e comprometimento pr√©vio.")
                    else: # Odds Ratio entre 0.5 e 1 (prote√ß√£o menor, 0.1% a 49%)
                        st.info(f"**Fator de Prote√ß√£o MODERADO!** O Odds Ratio de **{odds_ratio_display}** √© ligeiramente menor que 1. Isso indica que a presen√ßa ou aumento de '{feature_name_translated}' **diminui a chance de cancelamento em aproximadamente {percentage_decrease:.1f}%**. √â um fator protetor, mas com impacto mais discreto. Sua signific√¢ncia estat√≠stica (P-valor: {p_value:.3f} < 0.05) confirma que seu impacto √© real.")
                        st.markdown(f"**Como interpretar a varia√ß√£o percentual:** Um Odds Ratio de {odds_ratio_display} significa que a cada unidade de aumento neste fator (ou quando a categoria est√° presente), a chance de cancelamento √© multiplicada por {odds_ratio_display}. Para expressar isso em porcentagem de diminui√ß√£o, calculamos $(1 - {odds_ratio_display}) \\times 100\\%$.")
                        if feature_name_translated == VAR_TRANSLATIONS['required_car_parking_spaces']:
                            st.markdown("Solicitar uma vaga de garagem pode indicar que o cliente tem planos de viagem mais concretos (ex: viagem de carro), ou que ele valoriza comodidades espec√≠ficas, tornando a reserva mais firme e menos sujeita a cancelamentos por indecis√£o. √â um sinal de comprometimento com a viagem.")
                        elif feature_name_translated == VAR_TRANSLATIONS['children']:
                             st.markdown("A presen√ßa de crian√ßas na reserva, se significativa, pode indicar um planejamento familiar mais robusto e menos propenso a cancelamentos de √∫ltima hora, pois viagens em fam√≠lia geralmente envolvem mais coordena√ß√£o e comprometimento pr√©vio.")
                        elif feature_name_translated == VAR_TRANSLATIONS['babies']:
                             st.markdown("De forma similar √†s crian√ßas, a presen√ßa de beb√™s pode estar associada a um planejamento mais cuidadoso e, portanto, a uma menor chance de cancelamento, devido √† complexidade adicional de viajar com beb√™s que exige maior certeza nos planos e menor flexibilidade.")
                        elif feature_name_translated == VAR_TRANSLATIONS['country_grouped_PRT']:
                             st.markdown("A origem do cliente de Portugal (PRT), se significativa, pode ser um fator de prote√ß√£o ou risco, dependendo da base de dados e do contexto do hotel. Geralmente, clientes locais ou de pa√≠ses pr√≥ximos podem ter padr√µes de cancelamento diferentes, talvez com maior familiaridade com o destino ou menor burocracia para viagens.")
                        elif feature_name_translated == VAR_TRANSLATIONS['meal_BB']:
                             st.markdown("O regime de refei√ß√£o 'Caf√© da Manh√£' (BB) pode ser um fator de prote√ß√£o, indicando um cliente que busca uma experi√™ncia mais completa no hotel e est√° mais propenso a seguir com a reserva. Este cliente pode valorizar as comodidades do hotel al√©m da simples hospedagem.")
                        elif feature_name_translated == VAR_TRANSLATIONS['reserved_room_type_A']:
                             st.markdown("Ter o tipo de quarto reservado como 'A' (ou outro tipo espec√≠fico) pode ser um fator de prote√ß√£o ou risco, dependendo da popularidade e caracter√≠sticas desse quarto. Isso pode indicar que o cliente encontrou exatamente o que procurava, solidificando a reserva.")
                        elif feature_name_translated == VAR_TRANSLATIONS['distribution_channel_Direct']:
                             st.markdown("Reservas feitas diretamente com o hotel (canal Direto) frequentemente apresentam menor risco de cancelamento, pois o cliente tem um contato mais direto e, muitas vezes, pol√≠ticas de cancelamento mais claras ou benef√≠cios diretos que incentivam a manuten√ß√£o da reserva.")
                        elif feature_name_translated == VAR_TRANSLATIONS['is_company_booking']:
                             st.markdown("Se for uma reserva de empresa, e este fator for protetor, pode indicar maior estabilidade, pois reservas corporativas tendem a ser mais firmes devido a compromissos de neg√≥cios. √â um sinal de responsabilidade.")
                        elif feature_name_translated == VAR_TRANSLATIONS['customer_type_Contract']:
                             st.markdown(f"Reservas do tipo 'Contrato' podem apresentar uma chance de cancelamento {percentage_decrease:.1f}% menor, indicando uma maior estabilidade e comprometimento, possivelmente devido a acordos de longo prazo.")
                        elif feature_name_translated == VAR_TRANSLATIONS['market_segment_Direct']:
                             st.markdown(f"O segmento de mercado 'Direto' pode ter uma chance de cancelamento {percentage_decrease:.1f}% menor, pois esses clientes muitas vezes t√™m um relacionamento mais direto com o hotel ou maior convic√ß√£o em sua escolha.")


    st.markdown("---")
    st.subheader("Visualiza√ß√£o dos Principais Fatores de Impacto")
    st.markdown("O gr√°fico abaixo ilustra a magnitude e dire√ß√£o do impacto (se aumenta ou diminui o risco) dos fatores mais significativos, ranqueados por sua for√ßa.")

    significant_results = results[results['Signific√¢ncia'] == 'Significativo'].copy()
    if not significant_results.empty:
        significant_results['Impacto Percentual'] = (significant_results['For√ßa do Impacto (Odds Ratio)'] - 1) * 100
        significant_results.loc[significant_results['Impacto Percentual'] < 0, 'Impacto Percentual'] = \
            (1 - significant_results.loc[significant_results['Impacto Percentual'] < 0, 'For√ßa do Impacto (Odds Ratio)']) * 100 * (-1)

        significant_results = significant_results.sort_values(by="Impacto Percentual", ascending=True)

        # Gr√°fico 1: Todos os fatores significativos
        fig_impact_all, ax_impact_all = plt.subplots(figsize=(10, max(6, len(significant_results) * 0.5)))
        colors_all = ['red' if x > 0 else 'green' for x in significant_results['Impacto Percentual']]
        ax_impact_all.barh(significant_results.index, significant_results['Impacto Percentual'], color=colors_all)
        ax_impact_all.set_xlabel("Impacto na Chance de Cancelamento (%)")
        ax_impact_all.set_ylabel("Fator de Risco/Prote√ß√£o")
        ax_impact_all.set_title("Impacto Percentual de TODOS os Fatores Significativos")
        ax_impact_all.axvline(0, color='gray', linestyle='--')
        plt.tight_layout()
        st.pyplot(fig_impact_all, use_container_width=True)
        plt.close(fig_impact_all)
        st.caption("Barras vermelhas indicam fatores que aumentam o risco de cancelamento. Barras verdes indicam fatores que diminuem o risco. Este gr√°fico apresenta a vis√£o geral de todos os fatores com impacto estatisticamente significativo.")

    else:
        st.info("N√£o h√° fatores estatisticamente significativos para exibir nos gr√°ficos com as vari√°veis selecionadas. Por favor, selecione vari√°veis que tenham um impacto demonstr√°vel no cancelamento.")
# ==============================================================================
# ABA 3: SIMULADOR DE CEN√ÅRIOS
# ==============================================================================
with tab3:
    st.header("‚öôÔ∏è Simulador de Cen√°rios de Reserva")
    st.markdown("Experimente diferentes combina√ß√µes de caracter√≠sticas de reserva para entender o risco de cancelamento em tempo real. Isso permite visualizar o impacto das suas decis√µes e planejar a√ß√µes proativas.")

    st.subheader("Configure o Cen√°rio Hipot√©tico")
    st.info("""
    Ajuste os controles abaixo para simular as condi√ß√µes de uma nova reserva e veja o risco de cancelamento estimado pelo modelo.
    * **Vari√°veis num√©ricas:** Digite o valor exato no campo num√©rico.
    * **Vari√°veis categ√≥ricas:** Selecione a op√ß√£o desejada em um menu dropdown.
    """)

    sim_data = {}

    numerical_features_all = [f for f in data.columns if data[f].nunique() > 2 and f != 'is_canceled']
    binary_s_features_base = ['is_agent_booking', 'is_company_booking', 'is_weekend_stay', 'children_present', 'assigned_room_type_Changed']

    numerical_features_selected = [f for f in final_features_for_model_training if f in numerical_features_all]
    binary_s_features_selected = [f for f in final_features_for_model_training if f in binary_s_features_base]

    original_categorical_features_selected = []
    for original_cat_feature in CATEGORICAL_COLS_MAP.keys():
        if (original_cat_feature in VAR_TRANSLATIONS and
            any(f"{original_cat_feature}_{cat.replace(' ', '_').replace('/', '_').replace('-', '_')}" in final_features_for_model_training
                for cat in CATEGORICAL_COLS_MAP[original_cat_feature].keys())):
            original_categorical_features_selected.append(original_cat_feature)

    numerical_features_selected.sort()
    original_categorical_features_selected.sort()
    binary_s_features_selected.sort()


    st.markdown("#### Caracter√≠sticas Num√©ricas da Reserva")
    num_cols_num = 3
    cols_num = st.columns(num_cols_num)

    for i, feature in enumerate(numerical_features_selected):
        label = VAR_TRANSLATIONS.get(feature, feature.replace('_', ' ').title())
        col_widget = cols_num[i % num_cols_num]

        default_value = float(X_train_smote_mean.get(feature, 0))

        is_integer_type = (data[feature].dtype in ['int64', 'int32']) or (data[feature].dropna().apply(lambda x: x == int(x)).all())

        if is_integer_type:
            value_input = col_widget.number_input(
                f"{label} (Valor)",
                min_value=0,
                value=int(default_value),
                step=1,
                key=f"num_input_{feature}"
            )
            sim_data[feature] = value_input
        else:
            value_input = col_widget.number_input(
                f"{label} (Valor)",
                min_value=0.0,
                value=float(default_value),
                step=0.01,
                format="%.2f",
                key=f"num_input_{feature}"
            )
            sim_data[feature] = value_input


    st.markdown("#### Caracter√≠sticas Categ√≥ricas da Reserva")
    num_cols_cat = 3
    cols_cat = st.columns(num_cols_cat)

    for i, original_cat_feature in enumerate(original_categorical_features_selected):
        label = VAR_TRANSLATIONS.get(original_cat_feature, original_cat_feature.replace('_', ' ').title())
        col_widget = cols_cat[i % num_cols_cat]

        options_original_keys = list(CATEGORICAL_COLS_MAP[original_cat_feature].keys())

        default_cat_value_original_key = None
        dummy_counts = {}
        for option_orig_key in options_original_keys:
            dummy_col_name = f"{original_cat_feature}_{option_orig_key.replace(' ', '_').replace('/', '_').replace('-', '_')}"
            if dummy_col_name in X_train_smote_mean:
                dummy_counts[option_orig_key] = X_train_smote_mean[dummy_col_name]

        if dummy_counts:
            default_cat_value_original_key = max(dummy_counts, key=dummy_counts.get)
        else:
            default_cat_value_original_key = options_original_keys[0]

        selected_option_original_key = col_widget.selectbox(
            label,
            options_original_keys, # Passa as op√ß√µes originais como valor interno
            index=options_original_keys.index(default_cat_value_original_key),
            format_func=lambda x: CATEGORICAL_COLS_MAP[original_cat_feature].get(x, x), # Exibe a tradu√ß√£o da op√ß√£o
            key=f"sb_{original_cat_feature}"
        )
        sim_data[original_cat_feature] = selected_option_original_key

        # O mapeamento para dummies √© feito na se√ß√£o de Previs√£o, para garantir consist√™ncia.

    if binary_s_features_selected:
        st.markdown("#### Caracter√≠sticas Bin√°rias Adicionais")
        for i, feature in enumerate(binary_s_features_selected):
            label = VAR_TRANSLATIONS.get(feature, feature.replace('_', ' ').title())
            col_widget = cols_cat[i % num_cols_cat]

            default_value = int(X_train_smote_mean.get(feature, 0))
            default_index = 0 if default_value == 0 else 1

            sim_data[feature] = col_widget.selectbox(
                label,
                [0, 1],
                index=default_index,
                format_func=lambda x: "Sim" if x == 1 else "N√£o",
                key=f"sb_binary_{feature}"
            )


    # --- Previs√£o (Bloco Robusto) ---
    # Cria um DataFrame de uma linha com todos os dados da simula√ß√£o
    final_sim_data_for_prediction = {}
    for feature in final_features_for_model_training: # Itera sobre as features que o MODELO realmente usa
        if feature in numerical_features_all or feature in binary_s_features_base:
            final_sim_data_for_prediction[feature] = sim_data.get(feature, 0)
        else: # Se a feature √© uma dummy gerada de uma categoria original
            original_cat_name = None
            for cat_key in CATEGORICAL_COLS_MAP.keys():
                if feature.startswith(f"{cat_key}_"):
                    original_cat_name = cat_key
                    break

            if original_cat_name and original_cat_name in sim_data:
                selected_cat_value_original = sim_data[original_cat_name]
                dummy_name_from_selected = f"{original_cat_name}_{selected_cat_value_original.replace(' ', '_').replace('/', '_').replace('-', '_')}"

                final_sim_data_for_prediction[feature] = 1 if feature == dummy_name_from_selected else 0
            else:
                final_sim_data_for_prediction[feature] = 0

    # Passo 2: Preparar o DataFrame para o modelo
    # Cria um DataFrame de uma linha com todos os dados da simula√ß√£o
    sim_df = pd.DataFrame([final_sim_data_for_prediction])

    # Garante que todas as colunas que o modelo espera existam, preenchendo com 0 se faltarem
    for col in model.params.index:st.sidebar.header("üîß 1. Constru√ß√£o do Modelo Preditivo")
        if col != 'const' and col not in sim_df.columns:
            sim_df[col] = 0

    # Adiciona a constante para o c√°lculo do modelo
    sim_df_const = sm.add_constant(sim_df, has_constant='add')

    # Reordena as colunas para bater exatamente com a ordem que o modelo foi treinado
    sim_df_final = sim_df_const[model.params.index]

    # Converte tudo para n√∫mero, for√ßando erros a se tornarem 'NaN' (Not a Number)
    sim_df_final = sim_df_final.apply(pd.to_numeric, errors='coerce')

    # Substitui qualquer 'NaN' que possa ter surgido por 0, para seguran√ßa m√°xima
    sim_df_final.fillna(0, inplace=True)

    # Passo 3: Realizar a predi√ß√£o
    with np.errstate(over='ignore'):
        try:
            # Envia os dados limpos e garantidos para a predi√ß√£o
            sim_proba = model.predict(sim_df_final)[0]
        except Exception as e:
            st.error(f"Erro ao realizar a predi√ß√£o: {e}. Verifique as vari√°veis de entrada no simulador.")
            sim_proba = 0.5

    st.session_state.sim_data = sim_data
    st.session_state.sim_proba = sim_proba

    st.markdown("---")
    st.subheader("Diagn√≥stico do Risco para o Cen√°rio Simulado")
    gauge_col, _ = st.columns(2)
    with gauge_col:
        st.metric("Risco de Cancelamento:", f"{sim_proba:.1%}")
        st.progress(sim_proba)

        if sim_proba > 0.7:
            st.error("RISCO CR√çTICO! üö® A√ß√£o preventiva √© altamente recomendada para evitar a perda desta reserva.")
            st.markdown("Este cen√°rio indica uma alta probabilidade de cancelamento. √â fundamental agir rapidamente e de forma direcionada.")
        elif sim_proba > 0.4:
            st.warning("RISCO MODERADO. ‚ö†Ô∏è Monitore esta reserva de perto e considere a√ß√µes proativas.")
            st.markdown("A chance de cancelamento √© significativa. Medidas preventivas podem reduzir o risco de forma eficaz.")
        else:
            st.success("RISCO BAIXO. ‚úÖ √ìtima reserva! Foque em oferecer uma excelente experi√™ncia para fidelizar o cliente.")
            st.markdown("Este cen√°rio apresenta baixa probabilidade de cancelamento. Concentre-se em garantir a satisfa√ß√£o e fideliza√ß√£o do cliente.")
    st.info("Acesse a aba *'Plano de A√ß√£o Personalizado'* para ver recomenda√ß√µes espec√≠ficas e acion√°veis para este cen√°rio.")


# ==============================================================================
# ABA 4: PLANO DE A√á√ÉO PERSONALIZADO
# ==============================================================================
with tab4:
    st.header("üí° Plano de A√ß√£o Personalizado")
    st.markdown("Com base no cen√°rio simulado e no risco de cancelamento calculado, esta se√ß√£o oferece um plano de a√ß√£o estrat√©gico para mitigar o risco e otimizar a gest√£o de reservas.")

    if 'sim_proba' not in st.session_state:
        st.warning("Por favor, configure um cen√°rio na aba 'Simulador de Cen√°rios' primeiro para gerar um plano de a√ß√£o.")
    else:
        sim_data = st.session_state.sim_data
        sim_proba = st.session_state.sim_proba

        st.subheader(f"An√°lise do Cen√°rio: Risco de Cancelamento de {sim_proba:.1%}")

        if sim_proba < 0.2:
             st.success("‚úÖ **Cen√°rio de Baixo Risco! Parab√©ns!**")
             st.markdown("""
             As caracter√≠sticas desta reserva indicam uma alta probabilidade de n√£o cancelamento. O foco aqui deve ser na **fideliza√ß√£o e otimiza√ß√£o da receita**.

             **Estrat√©gias de A√ß√£o:**
             * **Fideliza√ß√£o Proativa:** Considere enviar um e-mail de boas-vindas personalizado, oferecendo um pequeno mimo no check-in (como um upgrade de quarto se dispon√≠vel, voucher para um drink no bar, ou um late check-out cortesia). Isso cria uma experi√™ncia memor√°vel e incentiva futuras reservas diretas.
             * **Upselling/Cross-selling:** Com baixo risco de cancelamento, voc√™ tem a oportunidade de oferecer servi√ßos adicionais antes ou durante a estadia (ex: pacotes de spa, jantar especial, passeios tur√≠sticos) para aumentar a receita por h√≥spede.
             * **Pesquisa de Satisfa√ß√£o:** Ap√≥s a estadia, envie uma pesquisa de satisfa√ß√£o para coletar feedback valioso e identificar promotores da sua marca, incentivando reviews positivos online.
             """)
        else:
            st.markdown("Com base no cen√°rio simulado e na chance de cancelamento, as seguintes a√ß√µes preventivas s√£o **altamente recomendadas**:")
            recomendacoes_mostradas = 0

            # Identificar fatores de risco ativos no cen√°rio simulado
            active_risks_in_scenario_map = {} # {feature_model_name: odds_ratio}
            for feature_model_name in model.params.index: # Itera sobre as features que o MODELO realmente usou
                if feature_model_name == 'const': continue

                coef_log_odds = model.params[feature_model_name]
                with np.errstate(over='ignore'):
                    odds_ratio = np.exp(coef_log_odds)

                if odds_ratio > 1.05: # Se √© um fator de risco (aumenta a chance em pelo menos 5%)
                    is_active_in_sim_data = False

                    # 1. Vari√°veis num√©ricas (diretamente do sim_data)
                    if feature_model_name in sim_data and sim_data[feature_model_name] is not None and feature_model_name in data.columns and data[feature_model_name].nunique() > 2:
                        if sim_data[feature_model_name] > data[feature_model_name].quantile(0.75): # Valor alto para num√©ricas
                            is_active_in_sim_data = True
                    # 2. Vari√°veis bin√°rias sint√©ticas (diretamente do sim_data)
                    elif feature_model_name in ['is_agent_booking', 'is_company_booking', 'is_weekend_stay', 'children_present', 'assigned_room_type_Changed']:
                        if sim_data.get(feature_model_name, 0) == 1:
                            is_active_in_sim_data = True
                    # 3. Dummies de vari√°veis categ√≥ricas originais
                    else:
                        original_cat_name = None
                        for cat_key in CATEGORICAL_COLS_MAP.keys():
                            if feature_model_name.startswith(f"{cat_key}_"):
                                original_cat_name = cat_key
                                break

                        if original_cat_name and original_cat_name in sim_data: # Se a categoria original foi selecionada no simulador
                            selected_category_original_value = sim_data[original_cat_name] # Valor original (ex: 'City Hotel')
                            # Construir o nome da dummy exatamente como o modelo espera
                            dummy_name_from_selected = f"{original_cat_name}_{selected_category_original_value.replace(' ', '_').replace('/', '_').replace('-', '_')}"
                            if feature_model_name == dummy_name_from_selected:
                                is_active_in_sim_data = True

                    if is_active_in_sim_data:
                        active_risks_in_scenario_map[feature_model_name] = odds_ratio

            sorted_active_risks_in_scenario = sorted(active_risks_in_scenario_map.items(), key=lambda item: item[1], reverse=True)

            # 2. Gerar recomenda√ß√µes com base nos fatores de risco ativos (priorizados)
            for feature_model_name, odds_ratio in sorted_active_risks_in_scenario:
                # O nome traduzido para display no plano de a√ß√£o
                feature_display_name = VAR_TRANSLATIONS.get(feature_model_name, feature_model_name.replace('_', ' ').title())

                if feature_model_name == 'deposit_type_Non Refund':
                    st.error(f"üö® **Ponto Cr√≠tico: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("""
                    Esta pol√≠tica de dep√≥sito est√° **fortemente associada a cancelamentos**. Se o cliente escolheu esta op√ß√£o e n√£o efetuou o pagamento, a chance de cancelamento √© extremamente alta.
                    * **A√ß√£o Imediata:** Confirme o pagamento ativamente com o cliente. Se o pagamento n√£o for feito dentro do prazo estipulado, proceda com o cancelamento o mais r√°pido poss√≠vel para liberar o quarto e minimizar perdas.
                    * **Estrat√©gia de Longo Prazo:** Avalie a viabilidade de flexibilizar as pol√≠ticas de dep√≥sito n√£o reembols√°vel ou oferecer op√ß√µes alternativas (ex: pequeno sinal, pr√©-autoriza√ß√£o de cart√£o) para reservas de alto risco, equilibrando seguran√ßa da receita com a redu√ß√£o do atrito para o cliente.
                    """)
                    recomendacoes_mostradas += 1

                elif feature_model_name == 'lead_time':
                    st.warning(f"‚è≥ **Aten√ß√£o: {feature_display_name} ({sim_data.get('lead_time', 0)} dias) (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("""
                    Reservas feitas com grande anteced√™ncia apresentam maior incerteza nos planos do cliente, aumentando o risco de cancelamento.
                    * **A√ß√£o Proativa:** Implemente uma "jornada de engajamento" pr√©-estadia. Envie e-mails peri√≥dicos com conte√∫do de valor (dicas sobre a cidade, atra√ß√µes pr√≥ximas, servi√ßos do hotel, previs√£o do tempo para a data da estadia) para manter o cliente conectado e animado com a reserva.
                    * **Incentivo √† Confirma√ß√£o:** Considere oferecer um pequeno benef√≠cio (ex: 10% de desconto em um servi√ßo do hotel, voucher para o restaurante, upgrade de amenidades) para clientes que confirmarem sua inten√ß√£o de manter a reserva 30 ou 60 dias antes do check-in.
                    """)
                    recomendacoes_mostradas += 1

                elif feature_model_name == 'market_segment_Online TA':
                    st.warning(f"üåê **Risco do Canal: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("""
                    Reservas originadas via OTAs (Booking, Expedia, etc.) frequentemente possuem pol√≠ticas de cancelamento mais flex√≠veis, contribuindo para o risco.
                    * **A√ß√£o Estrat√©gica:** Tente "converter" o cliente para uma reserva direta. Ofere√ßa um pequeno incentivo exclusivo (ex: late check-out gratuito, um drink de boas-vindas na chegada, upgrade de quarto sujeito a disponibilidade) se ele confirmar a reserva ou considerar futuras reservas diretas.
                    * **Comunica√ß√£o Direta:** Obtenha o contato do cliente via OTA e inicie uma comunica√ß√£o direta para criar um relacionamento e mostrar os benef√≠cios de reservar diretamente no futuro.
                    """)
                    recomendacoes_mostradas += 1

                elif feature_model_name == 'previous_cancellations':
                    st.error(f"üõë **Hist√≥rico: {feature_display_name} ({sim_data.get('previous_cancellations', 0)}) (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("""
                    Um hist√≥rico de cancelamentos anteriores √© um forte indicador de risco. Este cliente j√° demonstrou um padr√£o de comportamento de cancelamento.
                    * **A√ß√£o Personalizada:** Entre em contato proativamente e personalize a comunica√ß√£o. Tente entender os motivos dos cancelamentos anteriores e ofere√ßa solu√ß√µes ou garantias que abordem essas preocupa√ß√µes. Para reservas de alto valor, um contato direto e atencioso pode ser decisivo na reten√ß√£o.
                    * **Pol√≠tica de Cancelamento:** Para clientes com m√∫ltiplos cancelamentos, considere aplicar pol√≠ticas de pagamento mais rigorosas ou exigir um pr√©-pagamento para futuras reservas.
                    """)
                    recomendacoes_mostradas += 1

                elif feature_model_name == 'adr':
                    st.warning(f"üí∏ **Aten√ß√£o: {feature_display_name} ({sim_data.get('adr', 0):.2f}‚Ç¨) (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("""
                    Um ADR (Average Daily Rate) elevado pode levar a mais compara√ß√µes e reconsidera√ß√µes por parte do cliente, aumentando o risco de cancelamento se o valor percebido n√£o for alto.
                    * **A√ß√£o de Valor:** Garanta que o cliente compreenda o valor e os benef√≠cios *exclusivos* inclu√≠dos na tarifa. Destaque servi√ßos adicionais, comodidades premium, experi√™ncias personalizadas ou a qualidade superior que justificam o pre√ßo.
                    * **Experi√™ncia de Luxo:** Desde o primeiro contato, ofere√ßa um atendimento de excel√™ncia para justificar o investimento do cliente e superar suas expectativas, solidificando a decis√£o da reserva.
                    """)
                    recomendacoes_mostradas += 1

                elif feature_model_name == 'adults' and sim_data.get('adults', 0) == 0 and (sim_data.get('children', 0) > 0 or sim_data.get('babies', 0) > 0):
                    st.warning("üë§ **Alerta: N√∫mero de Adultos Zero (mas com Crian√ßas/Beb√™s)**")
                    st.markdown("""
                    Uma reserva com zero adultos, mas indicando a presen√ßa de crian√ßas ou beb√™s, pode ser um erro de preenchimento ou uma inconsist√™ncia s√©ria nos dados da reserva.
                    * **A√ß√£o Corretiva:** Entre em contato imediato com o cliente para validar e corrigir as informa√ß√µes da reserva. Isso evita problemas no check-in, frustra√ß√£o do cliente e poss√≠veis cancelamentos de √∫ltima hora devido a dados incorretos ou falta de clareza.
                    """)
                    recomendacoes_mostradas += 1

                elif feature_model_name == 'total_nights' and sim_data.get('total_nights', 0) <= 1:
                    if model.params.get('total_nights', 0) < 0:
                        st.warning("üåô **Aten√ß√£o: Estadia Muito Curta (1 Noite)**")
                        st.markdown("""
                        Estadias de apenas uma noite tendem a ter maior probabilidade de cancelamento, talvez por serem mais flex√≠veis ou sujeitas a mudan√ßas de planos de √∫ltima hora.
                        * **A√ß√£o de Efici√™ncia:** Para estas reservas, foque em agilizar o processo de check-in e check-out. Forne√ßa informa√ß√µes essenciais de forma clara e r√°pida (ex: wi-fi, hor√°rios de refei√ß√£o, contatos de emerg√™ncia) para garantir uma experi√™ncia suave e sem atritos.
                        * **Pequenos Encantamentos:** Considere oferecer um pequeno benef√≠cio ou amenidade (ex: garrafa de √°gua no quarto, desconto no minibar) para tornar a curta estadia mais memor√°vel e desincentivar o cancelamento de √∫ltima hora.
                        """)
                        recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['hotel_City Hotel']:
                    st.warning(f"üè® **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("Se este fator for significativo, indica que reservas em **Hot√©is de Cidade** podem ter um risco de cancelamento maior em compara√ß√£o com outros tipos de hotel (ex: Resort), devido a caracter√≠sticas de viagem ou p√∫blico-alvo distintos, como viagens a neg√≥cios mais suscet√≠veis a altera√ß√µes de agenda.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['distribution_channel_TA/TO']:
                   st.warning(f"ü§ù **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                   st.markdown("O canal de distribui√ß√£o 'Ag√™ncia de Viagem/Operadora' pode estar associado a um risco maior de cancelamento, possivelmente devido a pol√≠ticas de cancelamento mais flex√≠veis ou a tipos de reservas espec√≠ficos (ex: pacotes tur√≠sticos) intermediados por esses canais que t√™m maior probabilidade de serem alterados.")
                   recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['meal_SC']:
                   st.warning(f"üçΩÔ∏è **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                   st.markdown("O regime de refei√ß√£o 'Sem Refei√ß√£o' (SC) pode estar associado a um maior risco de cancelamento, talvez indicando um cliente que busca apenas hospedagem b√°sica e tem menos 'la√ßos' com a experi√™ncia completa do hotel ou menos comprometimento com a estadia planejada.")
                   recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['total_guests']:
                    st.warning(f"üë™ **Risco Potencial: {feature_display_name} ({sim_data.get('total_guests', 0)}) (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("Um maior n√∫mero de h√≥spedes (adultos + crian√ßas + beb√™s) pode aumentar a complexidade da reserva e a probabilidade de cancelamento. Coordenar planos para mais pessoas √© mais dif√≠cil, tornando a reserva mais suscet√≠vel a mudan√ßas ou desist√™ncias de √∫ltima hora.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['assigned_room_type_Changed']:
                    st.warning(f"üîÑ **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("Se o tipo de quarto atribu√≠do ao cliente foi alterado em rela√ß√£o ao que foi reservado, isso pode indicar um risco de cancelamento. A altera√ß√£o pode gerar insatisfa√ß√£o, confus√£o ou incerteza no cliente, levando-o a reconsiderar a reserva.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['is_agent_booking']:
                    st.warning(f"ü§ù **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("Se as reservas feitas por um agente s√£o um fator de risco, isso pode indicar que certos agentes t√™m maior taxa de cancelamento, talvez devido a volume alto ou caracter√≠sticas de suas reservas. Monitore a performance de agentes espec√≠ficos.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['is_weekend_stay']:
                    st.warning(f"üóìÔ∏è **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("Estadias que incluem noites de fim de semana podem ter um risco de cancelamento maior. Viagens de lazer podem ser mais flex√≠veis e suscet√≠veis a mudan√ßas de planos de √∫ltima hora em compara√ß√£o com viagens de neg√≥cios, por exemplo.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated == VAR_TRANSLATIONS['customer_type_Group']:
                    st.warning(f"üë• **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown(f"Reservas do tipo 'Grupo' podem apresentar uma chance de cancelamento {percentage_increase:.1f}% maior, possivelmente devido √† complexidade da coordena√ß√£o de m√∫ltiplos indiv√≠duos.")

                elif feature_name_translated == VAR_TRANSLATIONS['market_segment_Undefined']:
                    st.warning(f"‚ùì **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown("Um segmento de mercado indefinido pode indicar problemas na origem da reserva ou baixa rastreabilidade, o que pode estar associado a um risco maior de cancelamento por falta de informa√ß√µes claras.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated.startswith('Pa√≠s:'):
                    st.warning(f"üåç **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                    st.markdown(f"Clientes de {feature_name_translated.replace('Pa√≠s: ', '')}, se significativa, podem ter um risco maior de cancelamento. Isso pode ser devido a padr√µes de viagem locais ou pol√≠ticas de reserva comuns na regi√£o.")
                    recomendacoes_mostradas += 1

                elif feature_name_translated in VAR_TRANSLATIONS: # Catch-all para outras dummies de risco
                   st.warning(f"‚ö†Ô∏è **Risco Potencial: {feature_display_name} (Odds Ratio: {odds_ratio:.2f})**")
                   st.markdown(f"Este fator est√° associado a um risco aumentado de cancelamento. A√ß√µes preventivas espec√≠ficas para {feature_display_name.lower()} devem ser consideradas.")
                   recomendacoes_mostradas += 1

            # 3. Gerar recomenda√ß√µes para fatores de PROTE√á√ÉO que *n√£o est√£o presentes* ou est√£o em um n√≠vel desfavor√°vel
            # Nota: para vari√°veis categ√≥ricas originais, estamos verificando a AUS√äNCIA da categoria protetora
            # Ou a presen√ßa de uma categoria que n√£o √© a mais protetora.

            # Checar a aus√™ncia de Pedidos Especiais (total_of_special_requests)
            if 'total_of_special_requests' in model.params and model.params['total_of_special_requests'] < 0: # Se √© um fator de prote√ß√£o
                if sim_data.get('total_of_special_requests', 0) == 0:
                    st.info("‚ÑπÔ∏è **Oportunidade: Cliente Pouco Engajado (Sem Pedidos Especiais)**")
                    st.markdown("""
                    A aus√™ncia de pedidos especiais pode indicar um baixo n√≠vel de engajamento do cliente com a reserva. Aumentar o engajamento pode reduzir a incerteza e o risco de cancelamento.
                    * **A√ß√£o de Engajamento:** Envie um e-mail de "Pr√©-Check-in" proativo, perguntando se o hotel pode ajudar com algo para a estadia (ex: transfer, reservas em restaurantes, amenidades especiais no quarto, dicas de passeios ou eventos locais). Isso cria um canal de comunica√ß√£o, aumenta o engajamento e pode transformar a reserva em um compromisso mais firme.
                    """)
                    recomendacoes_mostradas += 1

            # Checar a aus√™ncia de Altera√ß√µes na Reserva (booking_changes)
            if 'booking_changes' in model.params and model.params['booking_changes'] < 0:
                if sim_data.get('booking_changes', 0) == 0:
                    st.info("‚ÑπÔ∏è **Oportunidade: Reserva Sem Altera√ß√µes (Indica Potencial Inatividade)**")
                    st.markdown("""
                    Reservas sem altera√ß√µes podem, paradoxalmente, ter um risco ligeiramente maior se o cliente n√£o est√° ativamente engajado. A capacidade de altera√ß√£o demonstra compromisso com a reserva, ajustando-a aos planos.
                    * **A√ß√£o de Flexibilidade:** Comunique proactivamente a flexibilidade das pol√≠ticas de altera√ß√£o do hotel. Isso pode incentivar o cliente a fazer pequenos ajustes em vez de cancelar completamente, mantendo a reserva ativa.
                    """)
                    recomendacoes_mostradas += 1

            if 'is_repeated_guest' in sim_data and sim_data['is_repeated_guest'] == 0:
               if 'is_repeated_guest' in model.params and model.params['is_repeated_guest'] < 0:
                    st.info("üÜï **Oportunidade: Cliente Novo (Potencial para Fideliza√ß√£o)**")
                    st.markdown("""
                    Este √© um cliente novo. Embora n√£o seja um fator de risco *direto* em si, a aus√™ncia do fator 'cliente recorrente' (que √© protetor) significa que h√° uma oportunidade de construir lealdade.
                    * **A√ß√£o de Fideliza√ß√£o:** Ofere√ßa um programa de fidelidade no check-in, um pequeno presente de boas-vindas, ou um cupom de desconto para a pr√≥xima estadia. Concentre-se em garantir uma primeira experi√™ncia excepcional para incentivar a recorr√™ncia.
                    """)
                    recomendacoes_mostradas += 1

            if 'required_car_parking_spaces' in sim_data and sim_data['required_car_parking_spaces'] == 0:
                if 'required_car_parking_spaces' in model.params and model.params['required_car_parking_spaces'] < 0:
                    st.info("üÖøÔ∏è **Oportunidade: N√£o H√° Solicita√ß√£o de Vaga de Garagem**")
                    st.markdown("""
                    A aus√™ncia de solicita√ß√£o de vaga de garagem pode significar que o cliente n√£o viajar√° de carro ou tem planos menos firmes para a viagem. Se este for um fator protetor, a sua aus√™ncia representa uma oportunidade.
                    * **A√ß√£o de Engajamento:** Verifique se o cliente precisar√° de alguma forma de transporte ou orienta√ß√£o sobre como chegar ao hotel. Ofere√ßa informa√ß√µes sobre estacionamentos pr√≥ximos ou transporte p√∫blico para aumentar a conveni√™ncia e o comprometimento.
                    """)
                    recomendacoes_mostradas += 1

            # Checar a aus√™ncia de Caf√© da Manh√£ (meal_BB) se for fator protetor
            if 'meal_BB' in model.params and model.params['meal_BB'] < 0:
                if sim_data.get('meal') != 'BB':
                    st.info("‚òï **Oportunidade: Regime de Refei√ß√£o Sem Caf√© da Manh√£ (BB)**")
                    st.markdown("""
                    Se o regime de Caf√© da Manh√£ (BB) √© um fator protetor e n√£o foi selecionado, pode indicar uma oportunidade de aumentar o engajamento.
                    * **A√ß√£o de Upselling/Engajamento:** Ofere√ßa o caf√© da manh√£ como um adicional com um pequeno desconto, ou destaque a qualidade do caf√© da manh√£ do hotel em um e-mail de pr√©-estadia para incentivar a adi√ß√£o e o compromisso.
                    """)
                    recomendacoes_mostradas += 1

            # Checar se Quarto A n√£o foi reservado (reserved_room_type_A) se for fator protetor
            if 'reserved_room_type_A' in model.params and model.params['reserved_room_type_A'] < 0:
                if sim_data.get('reserved_room_type') != 'A':
                    st.info("üõèÔ∏è **Oportunidade: Outro Tipo de Quarto Reservado (N√£o Tipo A)**")
                    st.markdown("""
                    Se o Tipo de Quarto 'A' for um fator de prote√ß√£o (se o cliente tiver reservado este tipo, a chance de cancelar √© menor) e este tipo n√£o foi reservado no cen√°rio, pode haver uma oportunidade.
                    * **A√ß√£o de Upgrade/Engajamento:** Considere oferecer um upgrade para este tipo de quarto (se dispon√≠vel e apropriado) ou destaque as vantagens do quarto reservado para aumentar a satisfa√ß√£o e reduzir a chance de cancelamento.
                    """)
                    recomendacoes_mostradas += 1

            if 'is_company_booking' in sim_data and sim_data['is_company_booking'] == 0:
                if 'is_company_booking' in model.params and model.params['is_company_booking'] < 0:
                    st.info("üè¢ **Oportunidade: Reserva N√£o Corporativa**")
                    st.markdown("""
                    Se reservas corporativas s√£o um fator de prote√ß√£o (menor risco de cancelamento), a aus√™ncia desse fator significa uma oportunidade para o hotel.
                    * **A√ß√£o de Segmenta√ß√£o:** Identifique potenciais clientes corporativos e ofere√ßa pacotes ou benef√≠cios espec√≠ficos para empresas para incentivar esse tipo de reserva mais est√°vel.
                    """)
                    recomendacoes_mostradas += 1

            if 'children_present' in sim_data and sim_data['children_present'] == 0:
                if 'children_present' in model.params and model.params['children_present'] < 0:
                    st.info("üë®‚Äçü¶∞ **Oportunidade: Aus√™ncia de Crian√ßas/Beb√™s**")
                    st.markdown("""
                    Se a presen√ßa de crian√ßas ou beb√™s √© um fator protetor (indica maior planejamento), a aus√™ncia deles pode ser uma oportunidade para refor√ßar o comprometimento.
                    * **A√ß√£o de Engajamento:** Para reservas sem crian√ßas, foque em aspectos como flexibilidade, op√ß√µes de lazer para adultos, ou conveni√™ncia, para solidificar a reserva e reduzir incertezas.
                    """)
                    recomendacoes_mostradas += 1

            if 'total_guests' in sim_data and sim_data['total_guests'] < 2:
                if 'total_guests' in model.params and model.params['total_guests'] < 0:
                    st.info("üßç **Oportunidade: Reserva para H√≥spede √önico**")
                    st.markdown("""
                    Reservas para um √∫nico h√≥spede, se este for um fator de menor prote√ß√£o (ou maior risco) em compara√ß√£o com m√∫ltiplos h√≥spedes, podem ser uma oportunidade.
                    * **A√ß√£o de Experi√™ncia Individual:** Personalize a comunica√ß√£o para h√≥spedes √∫nicos, destacando conveni√™ncias e servi√ßos que tornam a estadia confort√°vel para uma pessoa.
                    """)
                    recomendacoes_mostradas += 1

            if 'assigned_room_type_Changed' in sim_data and sim_data['assigned_room_type_Changed'] == 0:
                if 'assigned_room_type_Changed' in model.params and model.params['assigned_room_type_Changed'] > 0:
                    st.info("‚úÖ **Ponto Positivo: Tipo de Quarto Atribu√≠do N√ÉO Alterado**")
                    st.markdown("""
                    O fato de o tipo de quarto atribu√≠do n√£o ter sido alterado √© um bom sinal, pois mudan√ßas podem gerar insatisfa√ß√£o. Este √© um ponto positivo que contribui para a estabilidade da reserva.
                    """)
                    recomendacoes_mostradas += 1

            if 'is_weekend_stay' in sim_data and sim_data['is_weekend_stay'] == 0:
                if 'is_weekend_stay' in model.params and model.params['is_weekend_stay'] > 0:
                    st.info("üóìÔ∏è **Ponto Positivo: Estadia N√ÉO Inclui Fim de Semana**")
                    st.markdown("""
                    Se estadias de fim de semana s√£o mais arriscadas, o fato de esta reserva n√£o incluir o fim de semana √© um ponto positivo que contribui para a sua estabilidade.
                    """)
                    recomendacoes_mostradas += 1

            # Checar se o Pa√≠s 'BRA' n√£o foi selecionado E se country_grouped_BRA √© um fator de risco
            if 'country_grouped_BRA' in model.params and model.params['country_grouped_BRA'] > 0:
                if sim_data.get('country_grouped') != 'BRA':
                    st.info("üåç **Ponto Positivo: Cliente N√ÉO √â do Brasil (se Brasil for fator de risco)**")
                    st.markdown("""
                    Se clientes do Brasil (BRA) t√™m um risco maior de cancelamento (dada a base de dados do hotel), o fato de o cliente n√£o ser do Brasil √© um ponto positivo que contribui para a estabilidade da reserva.
                    """)
                    recomendacoes_mostradas += 1

            if 'customer_type_Contract' in sim_data and sim_data['customer_type_Contract'] == 0:
                if 'customer_type_Contract' in model.params and model.params['customer_type_Contract'] < 0:
                    st.info("ü§ù **Oportunidade: Cliente N√ÉO √â de Contrato**")
                    st.markdown("""
                    Se clientes de 'Contrato' s√£o um fator protetor, a aus√™ncia de um contrato pode ser uma oportunidade para o hotel.
                    * **A√ß√£o de Parceria:** Explore parcerias ou acordos corporativos que possam trazer reservas mais est√°veis e de longo prazo.
                    """)
                    recomendacoes_mostradas += 1


            if recomendacoes_mostradas == 0:
               st.info("‚ÑπÔ∏è **Risco Moderado Geral: Foco em Monitoramento e Comunica√ß√£o Padr√£o**")
               st.markdown("""
               Nenhum dos fatores de risco mais cr√≠ticos est√° ativo de forma proeminente neste cen√°rio, mas a combina√ß√£o dos fatores selecionados leva a um risco moderado.
               * **Monitoramento:** Mantenha um monitoramento regular sobre esta reserva, especialmente conforme a data do check-in se aproxima.
               * **Comunica√ß√£o Padr√£o Otimizada:** Certifique-se de que todas as comunica√ß√µes autom√°ticas (e-mails de confirma√ß√£o, lembretes de pagamento, informa√ß√µes de check-in) sejam claras, amig√°veis e incluam informa√ß√µes essenciais para evitar d√∫vidas que possam levar a cancelamentos.
               * **Canais Abertos:** Tenha uma equipe pronta para responder rapidamente a quaisquer d√∫vidas ou solicita√ß√µes do cliente, oferecendo suporte cont√≠nuo.
               """)